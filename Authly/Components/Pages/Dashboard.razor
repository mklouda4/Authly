@page "/dashboard"
@rendermode InteractiveServer
@using Authly.Components
@using Authly.Services
@using Authly.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using OtpNet
@inject IAuthService AuthService
@inject IApplicationService ApplicationService
@inject IApplicationLogger Logger
@inject ILocalizationService LocalizationService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IQRCodeService QRCodeService
@inject ITotpService TotpService
@implements IDisposable

@if (isAuthenticated)
{
    <div class="dashboard-container">
        
        <div class="dashboard-content">
            @if (currentUser != null)
            {
                <div class="profile-card">
                    <div class="profile-header">
                        <h2 class="profile-title">
                            <svg class="profile-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
                                <circle cx="12" cy="7" r="4"/>
                            </svg>
                            @LocalizationService.GetString("UserProfile")
                        </h2>
                        
                        @if (!isEditing)
                        {
                            <div class="profile-actions">
                                @if (currentUser?.IsExternal != true)
                                {
                                    <button class="btn btn-edit" @onclick="StartEditing">
                                        <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                                            <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
                                        </svg>
                                        @LocalizationService.GetString("Edit")
                                    </button>
                                }
                                
                                <a href="@Authorization.Local.LocalAuth.LogoutUri" class="btn btn-danger">
                                    <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/>
                                        <polyline points="16,17 21,12 16,7"/>
                                        <line x1="21" y1="12" x2="9" y2="12"/>
                                    </svg>
                                    @LocalizationService.GetString("Logout")
                                </a>
                                
                                @if (currentUser?.Administrator == true)
                                {
                                    <a href="/admin" class="btn btn-primary">
                                        <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <circle cx="12" cy="12" r="3"/>
                                            <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"/>
                                        </svg>
                                        @LocalizationService.GetString("AdminPanel")
                                    </a>
                                }
                            </div>
                        }
                    </div>
                    
                    @if (!isEditing)
                    {
                        <div class="profile-fields">
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("FullName")</label>
                                <div class="field-value">@currentUser.FullName</div>
                            </div>
                            
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("Username")</label>
                                <div class="field-value">@currentUser.UserName</div>
                            </div>
                            
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("Email")</label>
                                <div class="field-value">@currentUser.Email</div>
                            </div>
                            
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("TotpVerification")</label>
                                <div class="field-value totp-status">
                                    @if (currentUser.HasTotp)
                                    {
                                        <svg class="totp-icon totp-active" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <polyline points="20,6 9,17 4,12"/>
                                        </svg>
                                        <span class="totp-text totp-active">@LocalizationService.GetString("Active")</span>
                                    }
                                    else
                                    {
                                        <svg class="totp-icon totp-inactive" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <line x1="18" y1="6" x2="6" y2="18"/>
                                            <line x1="6" y1="6" x2="18" y2="18"/>
                                        </svg>
                                        <span class="totp-text totp-inactive">@LocalizationService.GetString("Inactive")</span>
                                    }
                                </div>
                            </div>
                            

                            @if (currentUser.HasTotp && !string.IsNullOrEmpty(currentUser.TotpSecret))
                            {
                                <div class="field">
                                    <label class="field-label">@LocalizationService.GetString("TotpSecretKey")</label>
                                    <div class="totp-secret">
                                        @currentUser.TotpSecret
                                    </div>
                                    <p class="totp-hint">
                                        @LocalizationService.GetString("TotpSetupInstructions")
                                    </p>
                                </div>
                                
                                <div class="field">
                                    <label class="field-label">@LocalizationService.GetString("TotpAuthenticator")</label>
                                    <div class="totp-authenticator-section">
                                        <!-- TOTP Live Code in Circle -->
                                        <div class="totp-live-container">
                                            <div class="totp-circle-wrapper">
                                                <div class="totp-circle" 
                                                     data-urgent="@(remainingSeconds < 10 && remainingSeconds >= 5)"
                                                     data-critical="@(remainingSeconds < 5)">
                                                    <svg class="totp-progress-ring" viewBox="0 0 120 120">
                                                        <!-- Background circle -->
                                                        <circle class="progress-ring-bg" 
                                                                cx="60" cy="60" r="54" 
                                                                fill="none" 
                                                                stroke-width="8"/>
                                                        <!-- Progress circle -->
                                                        <circle cx="60" cy="60" r="54"
                                                                fill="none"
                                                                stroke="#3b82f6"
                                                                stroke-width="8"
                                                                stroke-dasharray="339.29 339.29"
                                                                stroke-dashoffset="@GetProgressCircleOffset()"
                                                                transform="rotate(0 60 60)" />
                                                    </svg>
                                                    <div class="totp-circle-content">
                                                        <span class="totp-live-code">@currentTotpCode</span>
                                                        <span class="totp-countdown-text">@remainingSeconds s</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <p class="totp-live-hint">
                                                @LocalizationService.GetString("TotpCurrentCodeHint")
                                            </p>
                                        </div>
                                        
                                        <!-- QR Code -->
                                        <div class="totp-qr-container">
                                            <div class="qr-code-wrapper">
                                                <img src="data:image/png;base64,@GetQRCode()" 
                                                     alt="TOTP QR Code" 
                                                     class="qr-code-image" />
                                            </div>
                                            <p class="qr-code-hint">
                                                @LocalizationService.GetString("TotpQRCodeInstructions")
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <EditForm Model="editModel" OnValidSubmit="SaveChanges">
                            <DataAnnotationsValidator />
                            
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("FullName")</label>
                                <InputText @bind-Value="editModel.FullName" class="form-input" />
                            </div>
                            
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("Email")</label>
                                <InputText @bind-Value="editModel.Email" type="email" class="form-input" />
                            </div>
                            
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("NewPassword")</label>
                                <InputText @bind-Value="editModel.Password" type="password" placeholder="@LocalizationService.GetString("PasswordPlaceholder")" class="form-input" />
                            </div>
                            
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("TotpVerification")</label>
                                <div class="totp-toggle">
                                    <label class="totp-checkbox">
                                        <InputCheckbox @bind-Value="editModel.HasTotp" />
                                        <span class="totp-label">
                                            @if (editModel.HasTotp)
                                            {
                                                <svg class="totp-icon totp-active" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                    <polyline points="20,6 9,17 4,12"/>
                                                </svg>
                                                <span>@LocalizationService.GetString("TotpActive")</span>
                                            }
                                            else
                                            {
                                                <svg class="totp-icon totp-inactive" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                    <line x1="18" y1="6" x2="6" y2="18"/>
                                                    <line x1="6" y1="6" x2="18" y2="18"/>
                                                </svg>
                                                <span>@LocalizationService.GetString("TotpInactive")</span>
                                            }
                                        </span>
                                    </label>
                                </div>
                                
                                @if (editModel.HasTotp)
                                {
                                    <div class="totp-info info-success">
                                        <svg class="info-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <circle cx="12" cy="12" r="10"/>
                                            <line x1="12" y1="8" x2="12" y2="12"/>
                                            <line x1="12" y1="16" x2="12.01" y2="16"/>
                                        </svg>
                                        <div>
                                            <p class="info-title">@LocalizationService.GetString("TotpWillBeActive")</p>
                                            <p class="info-text">@LocalizationService.GetString("TotpWillBeActiveDescription")</p>
                                        </div>
                                    </div>
                                    
                                    @if (currentUser != null && currentUser.HasTotp && !string.IsNullOrEmpty(currentUser.TotpSecret))
                                    {
                                        <div class="totp-setup">
                                            <label class="field-label">@LocalizationService.GetString("TotpQRCode")</label>
                                            <div class="qr-code-container">
                                                <img src="data:image/png;base64,@GetQRCode()" 
                                                     alt="TOTP QR Code" 
                                                     class="qr-code-image" />
                                            </div>
                                            <p class="qr-hint">
                                                @LocalizationService.GetString("TotpQRCodeInstructions")
                                            </p>
                                            <div class="totp-secret">
                                                <label class="field-label">@LocalizationService.GetString("TotpManualEntry")</label>
                                                <code class="secret-code">@currentUser.TotpSecret</code>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="totp-info info-warning">
                                        <svg class="info-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
                                            <line x1="12" y1="9" x2="12" y2="13"/>
                                            <line x1="12" y1="17" x2="12.01" y2="17"/>
                                        </svg>
                                        <div>
                                            <p class="info-title">@LocalizationService.GetString("TotpWillBeDeactivated")</p>
                                            <p class="info-text">@LocalizationService.GetString("TotpWillBeDeactivatedDescription")</p>
                                        </div>
                                    </div>
                                }
                            </div>
                            
                            @if (!string.IsNullOrEmpty(editErrorMessage))
                            {
                                <div class="message error-message">
                                    <svg class="message-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
                                        <line x1="12" y1="9" x2="12" y2="13"/>
                                        <line x1="12" y1="17" x2="12.01" y2="17"/>
                                    </svg>
                                    @editErrorMessage
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="message success-message">
                                    <svg class="message-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <polyline points="20,6 9,17 4,12"/>
                                    </svg>
                                    @successMessage
                                </div>
                            }
                            
                            <div class="form-buttons">
                                <button type="submit" disabled="@isLoading" class="btn btn-success">
                                    @if (isLoading)
                                    {
                                        <svg class="btn-icon spinner" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <circle cx="12" cy="12" r="10"/>
                                            <path d="M16 12l-4-4-4 4"/>
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <polyline points="20,6 9,17 4,12"/>
                                        </svg>
                                    }
                                    @LocalizationService.GetString("SaveChanges")
                                </button>
                                
                                <button type="button" @onclick="CancelEditing" class="btn btn-outline">
                                    <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <line x1="18" y1="6" x2="6" y2="18"/>
                                        <line x1="6" y1="6" x2="18" y2="18"/>
                                    </svg>
                                    @LocalizationService.GetString("Cancel")
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            }
            else
            {
                <div class="debug-card">
                    <h2 class="debug-title">⚠️ @LocalizationService.GetString("DebugInformation")</h2>
                    <p class="debug-text">
                        @LocalizationService.GetString("DebugFailedToLoad")
                    </p>
                    <p class="debug-hint">
                        @LocalizationService.GetString("DebugRefreshPage")
                    </p>
                    
                    @if (ApplicationService.IsDebugLoggingEnabled)
                    {
                        <div class="debug-info">
                            <p><strong>@LocalizationService.GetString("DebugLogging")</strong> @LocalizationService.GetString("DebugEnabled")</p>
                            <p><strong>@LocalizationService.GetString("Application")</strong> @ApplicationService.ApplicationName v@ApplicationService.ApplicationVersion</p>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}
else if (isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <div style="color: #6b7280;">@LocalizationService.GetString("Loading")</div>
    </div>
}
else
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <div style="color: #6b7280;">@LocalizationService.GetString("RedirectingToLogin")</div>
    </div>
}

@code {
    [Parameter, SupplyParameterFromQuery] 
    public string? _refresh { get; set; }

    private bool isEditing = false;
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private string editErrorMessage = string.Empty;
    private string successMessage = string.Empty;
    private UserEditModel editModel = new();
    private User? currentUser;
    private Timer? totpTimer;
    private string currentTotpCode = "------";
    private int remainingSeconds = 30;

    public class UserEditModel
    {
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public bool HasTotp { get; set; } = false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.Log("Dashboard", "Starting initialization");

            if (!string.IsNullOrEmpty(_refresh))
            {
                Logger.Log("Dashboard", $"Refresh parameter detected: {_refresh}");
                await Task.Delay(1000);

                if (AuthenticationStateProvider is IdentityRevalidatingAuthenticationStateProvider revalidatingProvider)
                {
                    Logger.Log("Dashboard", "Forcing authentication state revalidation");
                    revalidatingProvider.RevalidateAuthenticationState();
                    await Task.Delay(500);
                }
            }
            else
            {
                await Task.Delay(200);
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User?.Identity?.IsAuthenticated == true;

            Logger.Log("Dashboard", $"IsAuthenticated: {isAuthenticated}");

            if (!isAuthenticated)
            {
                Logger.LogWarning("Dashboard", "User not authenticated, redirecting to login");
                var returnUrl = Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri));
                Navigation.NavigateTo($"/login?returnUrl={returnUrl}");
                return;
            }

            if (!string.IsNullOrEmpty(_refresh))
            {
                Logger.Log("Dashboard", "Removing refresh parameter from URL");
                Navigation.NavigateTo("/dashboard", replace: true);
            }

            currentUser = await AuthService.GetCurrentUserAsync();
            Logger.Log("Dashboard", $"Current user loaded: {currentUser?.UserName}");

            // Start TOTP timer if user has TOTP enabled
            StartTotpTimer();

            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError("Dashboard", "Error during initialization", ex);
            isLoading = false;
            isAuthenticated = false;
            Navigation.NavigateTo("/login");
        }
    }

    private void StartEditing()
    {
        if (currentUser != null)
        {
            editModel.FullName = currentUser.FullName;
            editModel.Email = currentUser.Email ?? string.Empty;
            editModel.Password = string.Empty;
            editModel.HasTotp = currentUser.HasTotp;
            editErrorMessage = string.Empty;
            successMessage = string.Empty;
            isEditing = true;
        }
    }

    private async Task SaveChanges()
    {
        isLoading = true;
        editErrorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var success = await AuthService.UpdateUserAsync(editModel.FullName, editModel.Email, editModel.Password, editModel.HasTotp);

            if (success)
            {
                successMessage = LocalizationService.GetString("DataSavedSuccessfully");
                currentUser = await AuthService.GetCurrentUserAsync();
                await Task.Delay(1500);
                isEditing = false;
                StateHasChanged();
            }
            else
            {
                editErrorMessage = LocalizationService.GetString("FailedToSaveChanges");
            }
        }
        catch (Exception)
        {
            editErrorMessage = LocalizationService.GetString("ErrorSavingChanges");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CancelEditing()
    {
        isEditing = false;
        editErrorMessage = string.Empty;
        successMessage = string.Empty;
        editModel = new UserEditModel();
    }

    private string GetQRCode()
    {
        try
        {
            if (currentUser != null && !string.IsNullOrEmpty(currentUser.TotpSecret) && !string.IsNullOrEmpty(currentUser.Email))
            {
                return QRCodeService.GenerateTotpQRCode(currentUser.Email, currentUser.TotpSecret, ApplicationService.ApplicationName);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Dashboard", "Error generating QR code", ex);
        }
        return string.Empty;
    }

    private void StartTotpTimer()
    {
        if (currentUser?.HasTotp == true && !string.IsNullOrEmpty(currentUser.TotpSecret))
        {
            // Generate initial code
            UpdateTotpCode();

            // Start timer that updates every 500ms for smoother animation without being too frequent
            totpTimer = new Timer(async _ =>
            {
                UpdateTotpCode();
                await InvokeAsync(StateHasChanged);
            }, null, TimeSpan.FromMilliseconds(500), TimeSpan.FromMilliseconds(500));
        }
    }

    private void UpdateTotpCode()
    {
        if (currentUser?.HasTotp == true && !string.IsNullOrEmpty(currentUser.TotpSecret))
        {
            try
            {
                currentTotpCode = TotpService.GenerateCode(currentUser.TotpSecret);
                remainingSeconds = TotpService.GetRemainingSeconds();
            }
            catch (Exception ex)
            {
                Logger.LogError("Dashboard", "Error updating TOTP code", ex);
                currentTotpCode = "------";
                remainingSeconds = 30;
            }
        }
    }

    private string GetCountdownDashArray()
    {
        var percentage = (double)remainingSeconds / 30.0 * 100;
        return $"{percentage}, 100";
    }
    private string GetProgressCircleOffset()
    {
        const double circumference = 339.29;
        var percentage = Math.Max(0, Math.Min(1, (double)remainingSeconds / 30.0));

        // Pro debugging
        var offset = circumference * (1.0 - percentage);

        return offset.ToString("F1", System.Globalization.CultureInfo.InvariantCulture);
    }

    public void Dispose()
    {
        totpTimer?.Dispose();
    }
}