@page "/admin"
@rendermode InteractiveServer
@using Authly.Services
@using Authly.Models
@using Authly.Authorization.UserStorage
@using Authly.Components.Admin
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserStorage UserStorage
@inject IAuthService AuthService
@inject IApplicationLogger Logger
@inject ILocalizationService LocalizationService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@if (isAuthenticated && isAdmin)
{
    <div class="dashboard-container">
        <div class="dashboard-content">
            <div class="admin-header">
                <h1 class="admin-title">
                    <svg class="admin-icon-sm" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="3"/>
                        <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"/>
                    </svg>
                    @LocalizationService.GetString("AdminPanel")
                </h1>
                <div class="admin-actions">
                    <a href="/dashboard" class="btn btn-outline btn-sm">
                        <svg class="btn-icon-sm" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
                            <polyline points="9,22 9,12 15,12 15,22"/>
                        </svg>
                        @LocalizationService.GetString("Dashboard")
                    </a>
                </div>
            </div>

            <!-- Tab Navigation -->
            <div class="admin-tabs">
                <button class="tab-button @(activeTab == "users" ? "active" : "")" @onclick="@(() => SetActiveTab("users"))">
                    <svg class="tab-icon-sm" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"/>
                        <circle cx="9" cy="7" r="4"/>
                        <path d="M23 21v-2a4 4 0 0 0-3-3.87"/>
                        <path d="M16 3.13a4 4 0 0 1 0 7.75"/>
                    </svg>
                    @LocalizationService.GetString("UserManagement")
                </button>
                
                <button class="tab-button @(activeTab == "ips" ? "active" : "")" @onclick="@(() => SetActiveTab("ips"))">
                    <svg class="tab-icon-sm" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
                        <line x1="8" y1="21" x2="16" y2="21"/>
                        <line x1="12" y1="17" x2="12" y2="21"/>
                    </svg>
                    @LocalizationService.GetString("IpManagement")
                </button>

                <button class="tab-button @(activeTab == "tokens" ? "active" : "")" @onclick="@(() => SetActiveTab("tokens"))">
                    <svg class="tab-icon-sm" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="1" y="4" width="22" height="16" rx="2" ry="2"/>
                        <line x1="1" y1="10" x2="23" y2="10"/>
                    </svg>
                    @LocalizationService.GetString("TokenManagement")
                </button>

                <button class="tab-button @(activeTab == "settings" ? "active" : "")" @onclick="@(() => SetActiveTab("settings"))">
                    <svg class="tab-icon-sm" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="3"/>
                        <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"/>
                    </svg>
                    @LocalizationService.GetString("ApplicationSettings")
                </button>
            </div>

            <!-- Tab Content with Lazy Loading -->
            @if (activeTab == "users")
            {
                <UsersManagementTab CurrentUser="currentUser" 
                                   IsLoading="false" 
                                   OnDataChanged="RefreshCurrentTabData" />
            }
            else if (activeTab == "ips")
            {
                <IpManagementTab IsLoading="false" 
                                OnDataChanged="RefreshCurrentTabData" />
            }
            else if (activeTab == "tokens")
            {
                <TokenManagementTab Users="availableUsers" 
                                   IsLoading="false" 
                                   OnDataChanged="RefreshCurrentTabData" />
            }
            else if (activeTab == "settings")
            {
                <ApplicationSettingsTab IsLoading="false" 
                                       OnDataChanged="RefreshCurrentTabData" />
            }
        </div>
    </div>
}
else if (isAuthenticated && !isAdmin)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <div class="access-denied">
            <h2>@LocalizationService.GetString("AccessDenied")</h2>
            <p>@LocalizationService.GetString("AdminPrivilegesRequired")</p>
            <a href="/dashboard" class="btn btn-primary">@LocalizationService.GetString("Dashboard")</a>
        </div>
    </div>
}
else if (isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <div style="color: #6b7280;">@LocalizationService.GetString("Loading")</div>
    </div>
}
else
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <div style="color: #6b7280;">@LocalizationService.GetString("RedirectingToLogin")</div>
    </div>
}

@code {
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private bool isAdmin = false;
    private string activeTab = "users"; // default hodnota
    
    private const string ADMIN_TAB_STORAGE_KEY = "authly_admin_active_tab";
    private readonly List<string> validTabs = new() { "users", "ips", "tokens", "settings" };

    private User? currentUser;
    private List<User> availableUsers = new(); // Pouze pro dropdown v token managementu

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.Log("AdminPanel", "Starting initialization");

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User?.Identity?.IsAuthenticated == true;

            if (!isAuthenticated)
            {
                Logger.LogWarning("AdminPanel", "User not authenticated, redirecting to login");
                Navigation.NavigateTo("/login");
                return;
            }

            currentUser = await AuthService.GetCurrentUserAsync();
            isAdmin = currentUser?.Administrator == true;

            if (!isAdmin)
            {
                Logger.LogWarning("AdminPanel", $"User {currentUser?.UserName} is not an administrator");
                isLoading = false;
                return;
            }

            // Načti poslední aktivní záložku z localStorage
            await LoadActiveTabFromStorage();

            // Načteme pouze uživatele pro dropdown v token managementu
            await LoadUsersForDropdown();
            
            isLoading = false;
            Logger.Log("AdminPanel", "Initialization completed - using lazy loading for tab data");
        }
        catch (Exception ex)
        {
            Logger.LogError("AdminPanel", "Error during initialization", ex);
            isLoading = false;
            await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                LocalizationService.GetString("UnexpectedError"));
        }
    }

    private async Task LoadActiveTabFromStorage()
    {
        try
        {
            var savedTab = await JSRuntime.InvokeAsync<string>("localStorage.getItem", ADMIN_TAB_STORAGE_KEY);
            
            if (!string.IsNullOrEmpty(savedTab) && validTabs.Contains(savedTab))
            {
                activeTab = savedTab;
                Logger.Log("AdminPanel", $"Restored active tab from storage: {activeTab}");
            }
            else
            {
                Logger.Log("AdminPanel", $"Using default tab: {activeTab}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning("AdminPanel", $"Could not load active tab from storage, using default. Error: {ex.Message}");
            // V případě chyby zůstane výchozí hodnota "users"
        }
    }

    private async Task SaveActiveTabToStorage(string tab)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", ADMIN_TAB_STORAGE_KEY, tab);
            Logger.Log("AdminPanel", $"Saved active tab to storage: {tab}");
        }
        catch (Exception ex)
        {
            Logger.LogWarning("AdminPanel", $"Could not save active tab to storage. Error: {ex.Message}");
            // Nebrání funkčnosti, jen se neuloží stav
        }
    }

    private async Task LoadUsersForDropdown()
    {
        try
        {
            // Načteme jen základní seznam uživatelů pro dropdown v token managementu
            availableUsers = await UserStorage.GetAllUsers();
            Logger.Log("AdminPanel", $"Loaded {availableUsers.Count} users for dropdown");
        }
        catch (Exception ex)
        {
            Logger.LogError("AdminPanel", "Error loading users for dropdown", ex);
        }
    }

    private async Task SetActiveTab(string tab)
    {
        if (!validTabs.Contains(tab))
        {
            Logger.LogWarning("AdminPanel", $"Invalid tab requested: {tab}");
            return;
        }

        activeTab = tab;
        await SaveActiveTabToStorage(tab);
        Logger.Log("AdminPanel", $"Switched to tab: {tab}");
        
        // Vynutí re-render komponenty pro správné zobrazení nové záložky
        StateHasChanged();
    }

    private async Task RefreshCurrentTabData()
    {
        // Pokud se změní data v aktuální záložce, můžeme refreshnout i data pro dropdown
        if (activeTab == "users" || activeTab == "tokens")
        {
            await LoadUsersForDropdown();
        }
        
        Logger.Log("AdminPanel", $"Data refreshed for tab: {activeTab}");
    }
}