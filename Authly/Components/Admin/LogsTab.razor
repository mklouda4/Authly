@using System.ComponentModel
@inject IApplicationLogger Logger
@implements IDisposable
@inherits BaseAdminTab

<div class="logs-header">
    <div class="logs-header-left">
        <h3 class="logs-title">
            <svg class="logs-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14,2 14,8 20,8"></polyline>
                <line x1="16" y1="13" x2="8" y2="13"></line>
                <line x1="16" y1="17" x2="8" y2="17"></line>
                <polyline points="10,9 9,9 8,9"></polyline>
            </svg>
            @LocalizationService.GetString("ApplicationLogs")
        </h3>
        <div class="logs-status">
            <span class="logs-count">@FilteredLogs.Count() @LocalizationService.GetString("LogsEntriesCount")</span>
            @if (!string.IsNullOrEmpty(selectedLevel))
            {
                <span class="logs-filter-indicator">
                    @LocalizationService.GetString("FilteredBy") <span class="filter-level @selectedLevel.ToLower()">@selectedLevel</span>
                </span>
            }
        </div>
    </div>
    <div class="logs-header-actions">
        <button class="btn btn-refresh" @onclick="RefreshLogs">
            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="23 4 23 10 17 10"></polyline>
                <polyline points="1 20 1 14 7 14"></polyline>
                <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>
            </svg>
            @LocalizationService.GetString("Refresh")
        </button>
        <button class="btn btn-clear" @onclick="ClearLogs">
            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="3,6 5,6 21,6"></polyline>
                <path d="M19,6v14a2,2 0 0,1-2,2H7a2,2 0 0,1-2-2V6m3,0V4a2,2 0 0,1,2-2h4a2,2 0 0,1,2,2v2"></path>
            </svg>
            @LocalizationService.GetString("Clear")
        </button>
    </div>
</div>

<div class="logs-controls">
    <div class="logs-controls-left">
        <label class="control-toggle">
            <input type="checkbox" @bind="autoRefresh" />
            <span class="toggle-slider"></span>
            <span class="toggle-label">@LocalizationService.GetString("AutoScroll")</span>
        </label>
    </div>
    
    <div class="logs-controls-right">
        <div class="level-filter">
            <label class="filter-label">@LocalizationService.GetString("LogLevel"):</label>
            <select class="form-select-logs" @bind="selectedLevel">
                <option value="">@LocalizationService.GetString("AllLevels")</option>
                <option value="DEBUG">@LocalizationService.GetString("Debug")</option>
                <option value="INFO">@LocalizationService.GetString("Info")</option>
                <option value="WARNING">@LocalizationService.GetString("Warning")</option>
                <option value="ERROR">@LocalizationService.GetString("Error")</option>
            </select>
        </div>
    </div>
</div>

<div class="logs-container" @ref="logContainer">
    <div class="logs-content">
        @if (!FilteredLogs.Any())
        {
            <div class="logs-empty">
                <svg class="empty-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                    <polyline points="14,2 14,8 20,8"></polyline>
                </svg>
                <h4>@LocalizationService.GetString("NoLogsFound")</h4>
                <p>@(string.IsNullOrEmpty(selectedLevel) ? LocalizationService.GetString("NoLogsFoundDescription") : $"{LocalizationService.GetString("NoLogsForLevel")} {selectedLevel}.")</p>
            </div>
        }
        else
        {
            @foreach (var log in FilteredLogs)
            {
                <div class="log-entry log-@log.Level.ToLower()">
                    <div class="log-entry-header">
                        <span class="log-timestamp">@log.Timestamp.ToString("HH:mm:ss.fff")</span>
                        <span class="log-level-badge log-level-@log.Level.ToLower()">
                            <span class="level-dot"></span>
                            @log.Level
                        </span>
                        <span class="log-category">[@log.Category]</span>
                    </div>
                    <div class="log-message">@log.Message</div>

                    @if (log.Exception != null)
                    {
                        <div class="log-exception">
                            <div class="exception-header">
                                <svg class="exception-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <circle cx="12" cy="12" r="10"></circle>
                                    <line x1="15" y1="9" x2="9" y2="15"></line>
                                    <line x1="9" y1="9" x2="15" y2="15"></line>
                                </svg>
                                <strong>@LocalizationService.GetString("Exception"):</strong> @log.Exception.Message
                            </div>
                            @if (showStackTrace && !string.IsNullOrEmpty(log.Exception.StackTrace))
                            {
                                <div class="exception-stacktrace">
                                    <pre>@log.Exception.StackTrace</pre>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

<div class="logs-footer">
    <label class="control-toggle">
        <input type="checkbox" @bind="showStackTrace" />
        <span class="toggle-slider"></span>
        <span class="toggle-label">@LocalizationService.GetString("ShowStackTrace")</span>
    </label>
</div>

@code {
    private List<LogEntry> logs = new();
    private ElementReference logContainer;
    private bool autoRefresh = true;
    private bool showStackTrace = false;
    private string selectedLevel = "";

    private IEnumerable<LogEntry> FilteredLogs =>
        string.IsNullOrEmpty(selectedLevel)
            ? logs
            : logs.Where(l => l.Level == selectedLevel);

    protected override void OnInitialized()
    {
        Logger.LogAdded += OnLogAdded;
        RefreshLogs();
    }

    private async void OnLogAdded(LogEntry entry)
    {
        if (!autoRefresh)
            return;

        await InvokeAsync(() =>
        {
            RefreshLogs();
        });
    }

    private void RefreshLogs()
    {
        logs = Logger.GetLogs().ToList();
        StateHasChanged();
    }

    private void ClearLogs()
    {
        Logger.ClearLogs();
        logs.Clear();
        StateHasChanged();
    }

    public void Dispose()
    {
        Logger.LogAdded -= OnLogAdded;
    }
}

<style>
    /* ========================================
       LOGS TAB - MODERN PROFESSIONAL STYLING
       ======================================== */
    
    /* Logs Header */
    .logs-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding: 1.5rem;
        background: var(--bg-card);
        border: 1px solid var(--border-card);
        border-radius: 12px;
        box-shadow: var(--shadow-sm);
    }

    .logs-header-left {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .logs-title {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin: 0;
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--text-primary);
    }

    .logs-icon {
        width: 24px;
        height: 24px;
        stroke: var(--accent-primary);
        flex-shrink: 0;
    }

    .logs-status {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: 0.875rem;
    }

    .logs-count {
        color: var(--text-secondary);
        font-weight: 500;
    }

    .logs-filter-indicator {
        color: var(--text-muted);
    }

    .filter-level {
        font-weight: 600;
        padding: 0.125rem 0.375rem;
        border-radius: 4px;
        font-size: 0.75rem;
        text-transform: uppercase;
    }

    .filter-level.debug {
        background: rgba(107, 114, 128, 0.1);
        color: #6b7280;
    }

    .filter-level.info {
        background: rgba(37, 99, 235, 0.1);
        color: #2563eb;
    }

    .filter-level.warning {
        background: rgba(245, 158, 11, 0.1);
        color: #f59e0b;
    }

    .filter-level.error {
        background: rgba(239, 68, 68, 0.1);
        color: #ef4444;
    }

    .logs-header-actions {
        display: flex;
        gap: 0.75rem;
    }

    /* Controls Bar */
    .logs-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding: 1rem 1.5rem;
        background: var(--bg-surface);
        border: 1px solid var(--border-color);
        border-radius: 8px;
    }

    .logs-controls-left,
    .logs-controls-right {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .level-filter {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .filter-label {
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--text-secondary);
        margin: 0;
    }

    /* Custom Toggle Switch */
    .control-toggle {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        cursor: pointer;
        user-select: none;
    }

    .control-toggle input[type="checkbox"] {
        position: absolute;
        opacity: 0;
        width: 0;
        height: 0;
    }

    .toggle-slider {
        position: relative;
        width: 44px;
        height: 24px;
        background: var(--border-color);
        border-radius: 12px;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .toggle-slider::before {
        content: '';
        position: absolute;
        top: 2px;
        left: 2px;
        width: 20px;
        height: 20px;
        background: white;
        border-radius: 50%;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .control-toggle input:checked + .toggle-slider {
        background: var(--accent-primary);
    }

    .control-toggle input:checked + .toggle-slider::before {
        transform: translateX(20px);
    }

    .toggle-label {
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--text-primary);
    }

    /* Custom Select */
    .form-select-logs {
        padding: 0.5rem 2rem 0.5rem 0.75rem;
        background: var(--bg-input);
        border: 1px solid var(--border-input);
        border-radius: 6px;
        color: var(--text-primary);
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        appearance: none;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
        background-position: right 0.5rem center;
        background-repeat: no-repeat;
        background-size: 1.25em 1.25em;
        min-width: 140px;
    }

    .form-select-logs:focus {
        outline: none;
        border-color: var(--accent-primary);
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
    }

    /* Main Logs Container */
    .logs-container {
        background: var(--bg-surface);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        height: 600px;
        overflow: hidden;
        box-shadow: var(--shadow-md);
        position: relative;
    }

    .logs-content {
        height: 100%;
        overflow-y: auto;
        overflow-x: hidden;
        padding: 0;
    }

    /* Empty State */
    .logs-empty {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        text-align: center;
        color: var(--text-muted);
        padding: 2rem;
    }

    .empty-icon {
        width: 48px;
        height: 48px;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .logs-empty h4 {
        margin: 0 0 0.5rem 0;
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--text-secondary);
    }

    .logs-empty p {
        margin: 0;
        font-size: 0.875rem;
        line-height: 1.4;
    }

    /* Log Entries */
    .log-entry {
        padding: 1rem 1.5rem;
        border-bottom: 1px solid var(--border-color);
        transition: all 0.2s ease;
        font-family: 'SF Mono', 'Monaco', 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
        font-size: 0.8rem;
        line-height: 1.4;
    }

    .log-entry:hover {
        background: var(--bg-hover);
    }

    .log-entry:last-child {
        border-bottom: none;
    }

    /* Log Entry Header */
    .log-entry-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 0.5rem;
        flex-wrap: wrap;
    }

    .log-timestamp {
        color: var(--text-muted);
        font-size: 0.75rem;
        font-weight: 500;
        font-family: inherit;
        white-space: nowrap;
    }

    .log-level-badge {
        display: flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.25rem 0.5rem;
        border-radius: 6px;
        font-size: 0.65rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.025em;
        white-space: nowrap;
    }

    .level-dot {
        width: 6px;
        height: 6px;
        border-radius: 50%;
        flex-shrink: 0;
    }

    /* Log Level Colors */
    .log-level-debug {
        background: rgba(107, 114, 128, 0.1);
        color: #6b7280;
        border: 1px solid rgba(107, 114, 128, 0.2);
    }

    .log-level-debug .level-dot {
        background: #6b7280;
    }

    .log-level-info {
        background: rgba(37, 99, 235, 0.1);
        color: #2563eb;
        border: 1px solid rgba(37, 99, 235, 0.2);
    }

    .log-level-info .level-dot {
        background: #2563eb;
    }

    .log-level-warning {
        background: rgba(245, 158, 11, 0.1);
        color: #f59e0b;
        border: 1px solid rgba(245, 158, 11, 0.2);
    }

    .log-level-warning .level-dot {
        background: #f59e0b;
    }

    .log-level-error {
        background: rgba(239, 68, 68, 0.1);
        color: #ef4444;
        border: 1px solid rgba(239, 68, 68, 0.2);
    }

    .log-level-error .level-dot {
        background: #ef4444;
    }

    .log-category {
        color: var(--text-secondary);
        font-weight: 600;
        font-size: 0.75rem;
    }

    /* Log Message */
    .log-message {
        color: var(--text-primary);
        font-weight: 400;
        margin-left: 0;
        word-wrap: break-word;
        white-space: pre-wrap;
    }

    /* Log Entry Variants */
    .log-entry.log-error {
        border-left: 3px solid #ef4444;
        background: rgba(239, 68, 68, 0.02);
    }

    .log-entry.log-warning {
        border-left: 3px solid #f59e0b;
        background: rgba(245, 158, 11, 0.02);
    }

    .log-entry.log-info {
        border-left: 3px solid #2563eb;
        background: rgba(37, 99, 235, 0.02);
    }

    .log-entry.log-debug {
        border-left: 3px solid #6b7280;
        background: rgba(107, 114, 128, 0.02);
    }

    /* Exception Styling */
    .log-exception {
        margin-top: 0.75rem;
        padding: 0.75rem;
        background: rgba(239, 68, 68, 0.05);
        border: 1px solid rgba(239, 68, 68, 0.15);
        border-radius: 6px;
    }

    .exception-header {
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
        color: #dc2626;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .exception-icon {
        width: 16px;
        height: 16px;
        flex-shrink: 0;
        margin-top: 2px;
    }

    .exception-stacktrace {
        margin-top: 0.5rem;
    }

    .exception-stacktrace pre {
        background: rgba(0, 0, 0, 0.05);
        padding: 0.75rem;
        border-radius: 4px;
        font-size: 0.7rem;
        line-height: 1.3;
        margin: 0;
        white-space: pre-wrap;
        word-wrap: break-word;
        overflow-x: auto;
        color: var(--text-secondary);
    }

    /* Footer */
    .logs-footer {
        margin-top: 1rem;
        padding: 1rem 1.5rem;
        background: var(--bg-surface);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        display: flex;
        justify-content: flex-start;
    }

    /* Button Styling */
    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border: 1px solid transparent;
        border-radius: 6px;
        font-weight: 500;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        min-height: 36px;
    }

    .btn-icon {
        width: 16px;
        height: 16px;
        stroke: currentColor;
        flex-shrink: 0;
    }

    .btn-refresh {
        background: var(--accent-primary);
        color: white;
        border-color: var(--accent-primary);
    }

    .btn-refresh:hover {
        background: var(--accent-secondary);
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(37, 99, 235, 0.3);
    }

    .btn-clear {
        background: #dc2626;
        color: white;
        border-color: #dc2626;
    }

    .btn-clear:hover {
        background: #b91c1c;
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(220, 38, 38, 0.3);
    }

    /* Dark Theme Adjustments */
    [data-theme="dark"] .log-entry.log-error {
        background: rgba(239, 68, 68, 0.05);
    }

    [data-theme="dark"] .log-entry.log-warning {
        background: rgba(245, 158, 11, 0.05);
    }

    [data-theme="dark"] .log-entry.log-info {
        background: rgba(37, 99, 235, 0.05);
    }

    [data-theme="dark"] .log-entry.log-debug {
        background: rgba(107, 114, 128, 0.05);
    }

    [data-theme="dark"] .log-exception {
        background: rgba(239, 68, 68, 0.08);
        border-color: rgba(239, 68, 68, 0.2);
    }

    [data-theme="dark"] .exception-stacktrace pre {
        background: rgba(255, 255, 255, 0.05);
        color: var(--text-muted);
    }

    [data-theme="dark"] .filter-level.debug {
        background: rgba(107, 114, 128, 0.15);
        color: #9ca3af;
    }

    [data-theme="dark"] .filter-level.info {
        background: rgba(37, 99, 235, 0.15);
        color: #60a5fa;
    }

    [data-theme="dark"] .filter-level.warning {
        background: rgba(245, 158, 11, 0.15);
        color: #fbbf24;
    }

    [data-theme="dark"] .filter-level.error {
        background: rgba(239, 68, 68, 0.15);
        color: #f87171;
    }

    [data-theme="dark"] .log-level-debug {
        background: rgba(107, 114, 128, 0.15);
        color: #9ca3af;
        border-color: rgba(107, 114, 128, 0.3);
    }

    [data-theme="dark"] .log-level-info {
        background: rgba(37, 99, 235, 0.15);
        color: #60a5fa;
        border-color: rgba(37, 99, 235, 0.3);
    }

    [data-theme="dark"] .log-level-warning {
        background: rgba(245, 158, 11, 0.15);
        color: #fbbf24;
        border-color: rgba(245, 158, 11, 0.3);
    }

    [data-theme="dark"] .log-level-error {
        background: rgba(239, 68, 68, 0.15);
        color: #f87171;
        border-color: rgba(239, 68, 68, 0.3);
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .logs-header {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
            padding: 1rem;
        }

        .logs-header-actions {
            width: 100%;
            justify-content: center;
        }

        .logs-controls {
            flex-direction: column;
            gap: 1rem;
            padding: 1rem;
        }

        .logs-controls-left,
        .logs-controls-right {
            width: 100%;
            justify-content: center;
        }

        .level-filter {
            justify-content: center;
        }

        .form-select-logs {
            min-width: 160px;
        }

        .logs-container {
            height: 400px;
        }

        .log-entry {
            padding: 0.75rem 1rem;
            font-size: 0.75rem;
        }

        .log-entry-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        .logs-title {
            font-size: 1.25rem;
        }

        .logs-icon {
            width: 20px;
            height: 20px;
        }
    }

    @@media (max-width: 480px) {
        .logs-header {
            padding: 0.75rem;
        }

        .logs-header-actions {
            flex-direction: column;
            gap: 0.5rem;
            width: 100%;
        }

        .btn {
            width: 100%;
            justify-content: center;
        }

        .logs-container {
            height: 350px;
        }

        .log-entry {
            padding: 0.5rem 0.75rem;
            font-size: 0.7rem;
        }

        .logs-controls {
            padding: 0.75rem;
        }

        .logs-footer {
            padding: 0.75rem;
        }
    }

    /* Scrollbar Styling */
    .logs-content::-webkit-scrollbar {
        width: 8px;
    }

    .logs-content::-webkit-scrollbar-track {
        background: var(--bg-accent);
        border-radius: 4px;
    }

    .logs-content::-webkit-scrollbar-thumb {
        background: var(--border-color);
        border-radius: 4px;
    }

    .logs-content::-webkit-scrollbar-thumb:hover {
        background: var(--text-muted);
    }

    /* Firefox scrollbar */
    .logs-content {
        scrollbar-width: thin;
        scrollbar-color: var(--border-color) var(--bg-accent);
    }
</style>