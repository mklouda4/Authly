@using Authly.Services
@using Authly.Models
@using System.Text.Json
@inherits BaseAdminTab

<div class="tab-content metrics-tab">
    @if (isLocalLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <span>@LocalizationService.GetString("Loading")</span>
        </div>
    }
    else if (!isMetricsEnabled)
    {
        <div class="metrics-disabled">
            <div class="warning-card">
                <svg class="warning-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" />
                    <line x1="12" y1="9" x2="12" y2="13" />
                    <line x1="12" y1="17" x2="12.01" y2="17" />
                </svg>
                <h3>@LocalizationService.GetString("MetricsDisabled")</h3>
                <p>@LocalizationService.GetString("MetricsDisabledDescription")</p>
            </div>
        </div>
    }
    else if (hasError)
    {
        <div class="error-container">
            <div class="error-card">
                <svg class="error-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="10" />
                    <line x1="15" y1="9" x2="9" y2="15" />
                    <line x1="9" y1="9" x2="15" y2="15" />
                </svg>
                <h3>@LocalizationService.GetString("ErrorLoadingMetrics")</h3>
                <p>@errorMessage</p>
                <button class="btn btn-primary" @onclick="RefreshData">
                    @LocalizationService.GetString("TryAgain")
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="metrics-header">
            <h2>@LocalizationService.GetString("MetricsDashboard")</h2>
            <div class="metrics-actions">
                <span class="last-updated">
                    @LocalizationService.GetString("LastUpdated"): @lastUpdated.ToString("G")
                </span>
                <div class="metrics-buttons">
                    <button class="btn btn-outline btn-sm" @onclick="RefreshData" disabled="@isRefreshing">
                        <svg class="btn-icon-sm @(isRefreshing ? "spin" : "")" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <polyline points="23 4 23 10 17 10" />
                            <polyline points="1 20 1 14 7 14" />
                            <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" />
                        </svg>
                        @LocalizationService.GetString("Refresh")
                    </button>
                </div>
            </div>
        </div>

        <!-- Metrics Overview Cards -->
        <div class="metrics-overview">
            <div class="metric-card">
                <div class="metric-header">
                    <h3>@LocalizationService.GetString("LoginAttempts")</h3>
                    <svg class="metric-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4" />
                        <polyline points="10,17 15,12 10,7" />
                        <line x1="15" y1="12" x2="3" y2="12" />
                    </svg>
                </div>
                <div class="metric-value">@(loginMetrics?.Total ?? 0)</div>
                <div class="metric-detail">
                    @LocalizationService.GetString("SuccessRate"): @(loginMetrics?.SuccessRate ?? 0)%
                </div>
            </div>

            <div class="metric-card">
                <div class="metric-header">
                    <h3>@LocalizationService.GetString("ActiveSessions")</h3>
                    <svg class="metric-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2" />
                        <circle cx="9" cy="7" r="4" />
                        <path d="M23 21v-2a4 4 0 0 0-3-3.87" />
                        <path d="M16 3.13a4 4 0 0 1 0 7.75" />
                    </svg>
                </div>
                <div class="metric-value">@(securityMetrics?.ActiveSessions ?? 0)</div>
                <div class="metric-detail">
                    @LocalizationService.GetString("CurrentActiveSessions")
                </div>
            </div>

            <div class="metric-card">
                <div class="metric-header">
                    <h3>@LocalizationService.GetString("SecurityEvents")</h3>
                    <svg class="metric-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z" />
                    </svg>
                </div>
                <div class="metric-value">@((securityMetrics?.UserLockouts ?? 0) + (securityMetrics?.IpBans ?? 0))</div>
                <div class="metric-detail">
                    @LocalizationService.GetString("LockoutsAndBans")
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="metrics-charts">
            <div class="chart-container">
                <div class="chart-header">
                    <h3>@LocalizationService.GetString("LoginAttemptsChart")</h3>
                </div>
                <canvas id="loginChart" width="400" height="200"></canvas>
            </div>

            <div class="chart-container">
                <div class="chart-header">
                    <h3>@LocalizationService.GetString("SecurityEventsChart")</h3>
                </div>
                <canvas id="securityChart" width="400" height="200"></canvas>
            </div>
        </div>
    }
</div>

<!-- Include Chart.js from CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    window.metricsCharts = {
        loginChart: null,
        securityChart: null,
        initialized: false,

        initialize: function() {
            if (this.initialized) return;
            this.initialized = true;
        },

        createLoginChart: function(data, labels) {
            const ctx = document.getElementById('loginChart');
            if (!ctx) {
                console.warn('LoginChart canvas element not found');
                return;
            }

            if (this.loginChart) {
                this.loginChart.destroy();
            }

            this.loginChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: [labels.successfulLabel, labels.failedLabel],
                    datasets: [{
                        data: [data.successful, data.failed],
                        backgroundColor: ['#10B981', '#EF4444'],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        }
                    }
                }
            });
        },

        createSecurityChart: function(securityData, eventsData, labels) {
            const ctx = document.getElementById('securityChart');
            if (!ctx) {
                console.warn('SecurityChart canvas element not found');
                return;
            }

            if (this.securityChart) {
                this.securityChart.destroy();
            }

            const eventTypes = Object.keys(eventsData);
            const eventValues = Object.values(eventsData);

            this.securityChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: [labels.userLockoutsLabel, labels.ipBansLabel, ...eventTypes],
                    datasets: [{
                        label: labels.countLabel,
                        data: [securityData.userLockouts, securityData.ipBans, ...eventValues],
                        backgroundColor: ['#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4', '#84CC16'],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    }
                }
            });
        },

        destroy: function() {
            if (this.loginChart) {
                this.loginChart.destroy();
                this.loginChart = null;
            }
            if (this.securityChart) {
                this.securityChart.destroy();
                this.securityChart = null;
            }
            this.initialized = false;
        }
    };
</script>

@code {
    [Inject] private IMetricsDashboardService MetricsDashboardService { get; set; } = default!;
    [Inject] private IMetricsService MetricsService { get; set; } = default!;
    [Inject] private IApplicationService ApplicationService { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    [Parameter] public bool IsVisible { get; set; } = true;

    private bool isMetricsEnabled = false;
    private bool hasError = false;
    private bool isRefreshing = false;
    private string errorMessage = string.Empty;
    private DateTime lastUpdated = DateTime.Now;

    private LoginMetrics? loginMetrics;
    private SecurityMetrics? securityMetrics;
    private Dictionary<string, double> securityEvents = new();

    private bool _previousVisibility = false;
    private bool _chartsInitialized = false;

    private class LoginMetrics
    {
        public double Successful { get; set; }
        public double Failed { get; set; }
        public double Total { get; set; }
        public double SuccessRate { get; set; }
    }

    private class SecurityMetrics
    {
        public double UserLockouts { get; set; }
        public double IpBans { get; set; }
        public double ActiveSessions { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        isMetricsEnabled = MetricsDashboardService.IsMetricsEnabled;
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && !_previousVisibility)
        {
            await LoadDataIfNeeded();
        }

        _previousVisibility = IsVisible;
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && IsVisible && isMetricsEnabled)
        {
            await LoadDataIfNeeded();
        }

        // Pokud máme data a grafy ještě nejsou inicializované, vykreslíme je
        if (IsVisible && !_chartsInitialized && loginMetrics != null && securityMetrics != null)
        {
            await Task.Delay(50); // Krátká pauza pro jistotu, že DOM je připraven
            await UpdateCharts();
            _chartsInitialized = true;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task LoadDataAsync()
    {
        if (!isMetricsEnabled)
        {
            return;
        }

        try
        {
            hasError = false;
            errorMessage = string.Empty;

            var metricsData = await MetricsDashboardService.GetMetricsDashboardDataAsync();

            if (metricsData != null)
            {
                // Convert to JsonDocument for easier parsing
                var json = JsonSerializer.Serialize(metricsData);
                var data = JsonDocument.Parse(json);

                ParseMetricsData(data);
                lastUpdated = DateTime.Now;

                // Označíme, že grafy potřebují být překresleny
                _chartsInitialized = false;

                StateHasChanged();
            }
            else
            {
                hasError = true;
                errorMessage = LocalizationService.GetString("NoMetricsData");
            }
        }
        catch (InvalidOperationException ioEx)
        {
            hasError = true;
            errorMessage = ioEx.Message;
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = $"Unexpected error: {ex.Message}";
        }
    }

    private void ParseMetricsData(JsonDocument data)
    {
        var root = data.RootElement;

        if (root.TryGetProperty("loginAttempts", out var loginElement))
        {
            loginMetrics = new LoginMetrics
            {
                Successful = loginElement.GetProperty("successful").GetDouble(),
                Failed = loginElement.GetProperty("failed").GetDouble(),
                Total = loginElement.GetProperty("total").GetDouble(),
                SuccessRate = loginElement.GetProperty("successRate").GetDouble()
            };
        }

        if (root.TryGetProperty("security", out var securityElement))
        {
            securityMetrics = new SecurityMetrics
            {
                UserLockouts = securityElement.GetProperty("userLockouts").GetDouble(),
                IpBans = securityElement.GetProperty("ipBans").GetDouble(),
                ActiveSessions = securityElement.GetProperty("activeSessions").GetDouble()
            };
        }

        if (root.TryGetProperty("securityEvents", out var eventsElement))
        {
            securityEvents.Clear();
            foreach (var prop in eventsElement.EnumerateObject())
            {
                securityEvents[prop.Name] = prop.Value.GetDouble();
            }
        }
    }

    private async Task UpdateCharts()
    {
        try
        {
            if (loginMetrics != null)
            {
                await JSRuntime.InvokeVoidAsync("metricsCharts.createLoginChart", new
                {
                    successful = loginMetrics.Successful,
                    failed = loginMetrics.Failed
                }, new
                {
                    successfulLabel = LocalizationService.GetString("Successful"),
                    failedLabel = LocalizationService.GetString("Failed")
                });
            }

            if (securityMetrics != null)
            {
                await JSRuntime.InvokeVoidAsync("metricsCharts.createSecurityChart",
                    securityMetrics, securityEvents, new
                    {
                        userLockoutsLabel = LocalizationService.GetString("UserLockouts"),
                        ipBansLabel = LocalizationService.GetString("IPBans"),
                        countLabel = LocalizationService.GetString("Count")
                    });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating charts: {ex.Message}");
        }
    }

    private async Task RefreshData()
    {
        if (isRefreshing) return;

        isRefreshing = true;
        StateHasChanged();

        await LoadDataAsync();

        // Po načtení dat počkáme chvilku a pak překreslíme grafy
        if (loginMetrics != null && securityMetrics != null)
        {
            await Task.Delay(100);
            await UpdateCharts();
            _chartsInitialized = true;
        }

        isRefreshing = false;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("metricsCharts.destroy");
        }
        catch
        {
            // Ignore JS interop errors during disposal
        }
    }
}

<style>
    .metrics-tab {
        padding: 1.5rem;
    }

    .metrics-disabled, .error-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 400px;
    }

    .warning-card, .error-card {
        text-align: center;
        padding: 2rem;
        background: var(--bg-card);
        border-radius: 12px;
        border: 1px solid var(--border-card);
        max-width: 400px;
    }

    .warning-icon, .error-icon {
        width: 48px;
        height: 48px;
        margin: 0 auto 1rem;
        color: #F59E0B;
    }

    .error-icon {
        color: #EF4444;
    }

    .metrics-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

        .metrics-header h2 {
            margin: 0;
            color: var(--text-primary);
        }

    .metrics-actions {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .last-updated {
        font-size: 0.875rem;
        color: var(--text-muted);
    }

    .metrics-buttons {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .metrics-overview {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .metric-card {
        background: var(--bg-card);
        padding: 1.5rem;
        border-radius: 12px;
        border: 1px solid var(--border-card);
    }

    .metric-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

        .metric-header h3 {
            margin: 0;
            font-size: 1rem;
            color: var(--text-secondary);
            font-weight: 500;
        }

    .metric-icon {
        width: 24px;
        height: 24px;
        color: var(--text-muted);
    }

    .metric-value {
        font-size: 2rem;
        font-weight: 700;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
    }

    .metric-detail {
        font-size: 0.875rem;
        color: var(--text-muted);
    }

    .metrics-charts {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 2rem;
    }

    .chart-container {
        background: var(--bg-card);
        padding: 1.5rem;
        border-radius: 12px;
        border: 1px solid var(--border-card);
    }

    .chart-header {
        margin-bottom: 1.5rem;
    }

        .chart-header h3 {
            margin: 0;
            font-size: 1.1rem;
            color: var(--text-primary);
            font-weight: 600;
        }

    canvas {
        height: 300px !important;
    }

    .spin {
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        from

    {
        transform: rotate(0deg);
    }

    to {
        transform: rotate(360deg);
    }

    }

    /* Tablet responsive styles */
    @@media (max-width: 768px) {
        .metrics-tab

    {
        padding: 1rem;
    }

    .metrics-header {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
    }

    .metrics-actions {
        width: 100%;
        justify-content: space-between;
    }

    .metrics-overview {
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }

    .metric-card {
        padding: 1rem;
    }

    .metric-value {
        font-size: 1.5rem;
    }

    .metrics-charts {
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }

    .chart-container {
        padding: 1rem;
    }

    canvas {
        height: 250px !important;
    }

    .warning-card, .error-card {
        padding: 1.5rem;
        margin: 1rem;
    }

    }

    /* Mobile responsive styles */
    @@media (max-width: 480px) {
        .metrics-tab

    {
        padding: 0.5rem;
        overflow-x: hidden;
    }

    .metrics-header h2 {
        font-size: 1.25rem;
    }

    .metrics-actions {
        flex-direction: column;
        gap: 0.75rem;
        align-items: stretch;
    }

    .last-updated {
        text-align: center;
        order: 2;
    }

    .metrics-buttons {
        justify-content: center;
        order: 1;
    }

    .metrics-overview {
        grid-template-columns: 1fr;
        gap: 0.75rem;
    }

    .metric-card {
        padding: 0.75rem;
        margin: 0;
        width: 100%;
        box-sizing: border-box;
    }

    .metric-header {
        margin-bottom: 0.75rem;
    }

        .metric-header h3 {
            font-size: 0.875rem;
        }

    .metric-icon {
        width: 20px;
        height: 20px;
    }

    .metric-value {
        font-size: 1.25rem;
        margin-bottom: 0.25rem;
    }

    .metric-detail {
        font-size: 0.8rem;
    }

    .metrics-charts {
        gap: 1rem;
        grid-template-columns: 1fr;
        width: 100%;
    }

    .chart-container {
        padding: 0.5rem;
        min-height: 250px;
        width: 100%;
        max-width: 100%;
        box-sizing: border-box;
        overflow: hidden;
    }

    .chart-header {
        margin-bottom: 0.75rem;
    }

        .chart-header h3 {
            font-size: 0.9rem;
        }

    canvas {
        height: 180px !important;
        width: 100% !important;
        max-width: 100% !important;
        box-sizing: border-box;
    }

    .warning-card, .error-card {
        padding: 1rem;
        margin: 0.5rem;
        max-width: calc(100% - 1rem);
        box-sizing: border-box;
    }

    .warning-icon, .error-icon {
        width: 36px;
        height: 36px;
    }

    .btn {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
    }

    .btn-sm {
        padding: 0.375rem 0.75rem;
        font-size: 0.8rem;
    }

    .btn-icon-sm {
        width: 16px;
        height: 16px;
    }

    /* Zlepšení čitelnosti na malých obrazovkách */
    .loading-container {
        padding: 2rem 1rem;
    }

    .loading-spinner {
        width: 32px;
        height: 32px;
    }

    /* Zabránění přetečení */
    * {
        box-sizing: border-box;
    }

    }

    /* Extra malé obrazovky */
    @@media (max-width: 320px) {
        .metrics-tab

    {
        padding: 0.25rem;
    }

    .metric-card {
        padding: 0.5rem;
    }

    .metric-value {
        font-size: 1.1rem;
    }

    .chart-container {
        padding: 0.25rem;
        min-height: 220px;
    }

    .chart-header {
        margin-bottom: 0.5rem;
    }

        .chart-header h3 {
            font-size: 0.85rem;
        }

    canvas {
        height: 160px !important;
        width: 100% !important;
        max-width: 100% !important;
    }

    .btn, .btn-sm {
        font-size: 0.75rem;
        padding: 0.375rem 0.5rem;
    }

    .warning-card, .error-card {
        padding: 0.75rem;
        margin: 0.25rem;
        max-width: calc(100% - 0.5rem);
    }

    }
</style>