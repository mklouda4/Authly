@rendermode InteractiveServer
@using Authly.Services
@using Authly.Models
@using Microsoft.AspNetCore.Components
@inherits BaseAdminTab
@inject IOAuthClientService OAuthClientService
@inject IApplicationLogger Logger
@inject ILocalizationService LocalizationService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IApplicationService ApplicationService 

<div class="admin-section">
    <div class="section-header">
        <h2 class="section-title">
            <svg class="section-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                <polyline points="14,2 14,8 20,8"/>
                <line x1="16" y1="13" x2="8" y2="13"/>
                <line x1="16" y1="17" x2="8" y2="17"/>
                <polyline points="10,9 9,9 8,9"/>
            </svg>
            @LocalizationService.GetString("OAuthClientManagement")
        </h2>
        <button class="btn btn-primary" @onclick="ShowCreateClientModal" disabled="@isLocalLoading">
            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="12" y1="5" x2="12" y2="19"/>
                <line x1="5" y1="12" x2="19" y2="12"/>
            </svg>
            @LocalizationService.GetString("CreateOAuthClient")
        </button>
    </div>

    @if (isLocalLoading)
    {
        <div class="loading-state">
            <div class="loading-spinner"></div>
            <p>@LocalizationService.GetString("LoadingOAuthClients")</p>
        </div>
    }
    else if (!oauthClients.Any())
    {
        <div class="empty-state">
            <p>@LocalizationService.GetString("NoOAuthClientsConfigured")</p>
        </div>
    }
    else
    {
        <div class="table-container">
            <table class="data-table admin-table">
                <thead>
                    <tr>
                        <th>@LocalizationService.GetString("ClientName")</th>
                        <th>@LocalizationService.GetString("ClientId")</th>
                        <th>@LocalizationService.GetString("ClientType")</th>
                        <th>@LocalizationService.GetString("Scopes")</th>
                        <th>@LocalizationService.GetString("Status")</th>
                        <th>@LocalizationService.GetString("Created")</th>
                        <th>@LocalizationService.GetString("Actions")</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var client in oauthClients)
                    {
                        <tr class="@(client.Enabled ? "" : "banned-row")">
                            <td class="username-cell" data-label="@LocalizationService.GetString("ClientName")">
                                @client.ClientName
                                @if (!string.IsNullOrEmpty(client.Description))
                                {
                                    <div style="font-size: 0.75rem; color: var(--text-muted); margin-top: 0.25rem;">
                                        @client.Description
                                    </div>
                                }
                            </td>
                            <td class="ip-cell" data-label="@LocalizationService.GetString("ClientId")">
                                @client.ClientId
                            </td>
                            <td class="role-cell" data-label="@LocalizationService.GetString("ClientType")">
                                <span class="status-badge @(client.ClientType == OAuthClientType.Confidential ? "status-active" : "status-inactive")">
                                    @client.ClientType.ToString()
                                </span>
                            </td>
                            <td class="email-cell" data-label="@LocalizationService.GetString("Scopes")">
                                @string.Join(", ", client.AllowedScopes)
                            </td>
                            <td class="status-cell" data-label="@LocalizationService.GetString("Status")">
                                <span class="status-badge @(client.Enabled ? "status-active" : "status-inactive")">
                                    @(client.Enabled ? LocalizationService.GetString("Enabled") : LocalizationService.GetString("Disabled"))
                                </span>
                            </td>
                            <td class="date-cell" data-label="@LocalizationService.GetString("Created")">
                                @client.CreatedUtc.ToString("dd.MM.yyyy HH:mm")
                            </td>
                            <td class="actions-cell" data-label="@LocalizationService.GetString("Actions")">
                                <div class="action-buttons">
                                    <button class="btn-sm btn-admin-action btn-info" @onclick="() => ShowClientDetails(client)" title="@LocalizationService.GetString("ViewDetails")">
                                        <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                                            <circle cx="12" cy="12" r="3"/>
                                        </svg>
                                        @LocalizationService.GetString("Details")
                                    </button>
                                    <button class="btn-sm btn-admin-action btn-warning" @onclick="() => ShowEditClientModal(client)" title="@LocalizationService.GetString("EditClient")">
                                        <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <polygon points="14,2 18,6 7,17 3,17 3,13 14,2"/>
                                            <line x1="11" y1="5" x2="16" y2="10"/>
                                        </svg>
                                        @LocalizationService.GetString("Edit")
                                    </button>
                                    @if (client.ClientType == OAuthClientType.Confidential)
                                    {
                                        <button class="btn-sm btn-admin-action btn-info" @onclick="() => ShowRegenerateSecretModal(client)" title="@LocalizationService.GetString("RegenerateSecret")">
                                            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                <path d="M21 2l-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4"/>
                                            </svg>
                                            @LocalizationService.GetString("Secret")
                                        </button>
                                    }
                                    <button class="btn-sm btn-admin-action @(client.Enabled ? "btn-warning" : "btn-success")" 
                                            @onclick="() => ToggleClientEnabled(client)" 
                                            title="@(client.Enabled ? LocalizationService.GetString("DisableClient") : LocalizationService.GetString("EnableClient"))">
                                        @if (client.Enabled)
                                        {
                                            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                <circle cx="12" cy="12" r="10"/>
                                                <line x1="15" y1="9" x2="9" y2="15"/>
                                                <line x1="9" y1="9" x2="15" y2="15"/>
                                            </svg>
                                            @LocalizationService.GetString("Disable")
                                        }
                                        else
                                        {
                                            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/>
                                                <polyline points="22,4 12,14.01 9,11.01"/>
                                            </svg>
                                            @LocalizationService.GetString("Enable")
                                        }
                                    </button>
                                    <button class="btn-sm btn-admin-action btn-danger" @onclick="() => ShowDeleteClientModal(client)" title="@LocalizationService.GetString("DeleteClient")">
                                        <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <polyline points="3,6 5,6 21,6"/>
                                            <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
                                            <line x1="10" y1="11" x2="10" y2="17"/>
                                            <line x1="14" y1="11" x2="14" y2="17"/>
                                        </svg>
                                        @LocalizationService.GetString("Delete")
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Create Client Modal -->
@if (showCreateClientModal)
{
    <div class="modal-overlay" @onclick="HideCreateClientModal">
        <div class="modal-dialog large-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>@LocalizationService.GetString("CreateOAuthClient")</h3>
                <button class="modal-close" @onclick="HideCreateClientModal">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"/>
                        <line x1="6" y1="6" x2="18" y2="18"/>
                    </svg>
                </button>
            </div>
            <div class="modal-body">
                <form @onsubmit="CreateClient" @onsubmit:preventDefault="true">
                    <div class="client-details-grid">
                        <!-- Basic Information -->
                        <div class="detail-section">
                            <h4 class="section-subtitle">@LocalizationService.GetString("BasicInformation")</h4>
                            
                            <div class="field">
                                <label class="field-label" for="clientName">@LocalizationService.GetString("ClientName") *</label>
                                <input id="clientName" @bind="newClientRequest.ClientName" class="form-input" type="text" required maxlength="100" />
                            </div>

                            <div class="field">
                                <label class="field-label" for="clientDescription">@LocalizationService.GetString("Description")</label>
                                <textarea id="clientDescription" @bind="newClientRequest.Description" class="form-input" rows="3" maxlength="500"></textarea>
                            </div>

                            <div class="field">
                                <label class="field-label" for="clientType">@LocalizationService.GetString("ClientType") *</label>
                                <select id="clientType" @bind="newClientRequest.ClientType" class="form-select">
                                    <option value="@OAuthClientType.Confidential">@LocalizationService.GetString("Confidential")</option>
                                    <option value="@OAuthClientType.Public">@LocalizationService.GetString("Public")</option>
                                </select>
                            </div>
                        </div>

                        <!-- Configuration Details -->
                        <div class="detail-section">
                            <h4 class="section-subtitle">@LocalizationService.GetString("Configuration")</h4>
                            
                            <div class="field">
                                <label class="field-label" for="redirectUris">@LocalizationService.GetString("RedirectURIs") *</label>
                                <textarea id="redirectUris" @bind="redirectUrisText" class="form-input" rows="4" placeholder="https://example.com/callback&#10;https://app.example.com/auth/callback"></textarea>
                                <small style="color: var(--text-muted); font-size: 0.8rem; margin-top: 0.5rem; display: block;">@LocalizationService.GetString("OneURIPerLine")</small>
                            </div>

                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("AllowedScopes") *</label>
                                <div class="field-value">
                                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 0.75rem; margin-top: 0.5rem; padding: 1rem; background: var(--bg-input); border: 1px solid var(--border-input); border-radius: 8px;">
                                        @foreach (var scope in availableScopes)
                                        {
                                            <label style="display: flex; align-items: center; gap: 0.5rem; font-weight: normal; cursor: pointer;">
                                                <input type="checkbox" 
                                                       checked="@selectedScopes.Contains(scope.Name)" 
                                                       @onchange="@((ChangeEventArgs e) => ToggleScope(scope.Name, (bool)e.Value!))" 
                                                       style="width: 16px; height: 16px;" />
                                                <span style="font-size: 0.875rem;">@scope.DisplayName</span>
                                            </label>
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="config-grid">
                                <div class="field">
                                    <label class="field-label" for="accessTokenLifetime">@LocalizationService.GetString("AccessTokenLifetime") (@LocalizationService.GetString("Seconds"))</label>
                                    <input id="accessTokenLifetime" @bind="newClientRequest.AccessTokenLifetime" class="form-input" type="number" min="300" max="86400" />
                                </div>

                                <div class="field">
                                    <label class="field-label" for="refreshTokenLifetime">@LocalizationService.GetString("RefreshTokenLifetimeOptional") (@LocalizationService.GetString("Seconds"))</label>
                                    <input id="refreshTokenLifetime" @bind="newClientRequest.RefreshTokenLifetime" class="form-input" type="number" min="300" max="2592000" />
                                    <small style="color: var(--text-muted); font-size: 0.8rem; margin-top: 0.5rem; display: block;">@LocalizationService.GetString("LeaveEmptyForNoRefreshTokens")</small>
                                </div>

                                <div class="field">
                                    <label class="field-label">@LocalizationService.GetString("RequirePKCE")</label>
                                    <div class="field-value">
                                        <label style="display: flex; align-items: center; gap: 0.5rem; font-weight: normal; cursor: pointer; padding: 0.75rem; background: var(--bg-input); border: 1px solid var(--border-input); border-radius: 8px;">
                                            <input type="checkbox" @bind="newClientRequest.RequirePkce" style="width: 16px; height: 16px;" />
                                            <span style="font-size: 0.875rem; color: var(--text-primary);">@LocalizationService.GetString("RequirePKCE")</span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn btn-outline" @onclick="HideCreateClientModal">
                            @LocalizationService.GetString("Cancel")
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isCreatingClient">
                            @if (isCreatingClient)
                            {
                                <div class="loading-spinner"></div>
                            }
                            @LocalizationService.GetString("CreateClient")
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

<!-- Client Details Modal -->
@if (showClientDetailsModal && selectedClient != null)
{
    <div class="modal-overlay" @onclick="HideClientDetailsModal">
        <div class="modal-dialog large-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>@LocalizationService.GetString("ClientDetails"): @selectedClient.ClientName</h3>
                <button class="modal-close" @onclick="HideClientDetailsModal">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"/>
                        <line x1="6" y1="6" x2="18" y2="18"/>
                    </svg>
                </button>
            </div>
            <div class="modal-body">
                <div class="client-details-grid">
                    <!-- Basic Information -->
                    <div class="detail-section">
                        <h4 class="section-subtitle">@LocalizationService.GetString("BasicInformation")</h4>
                        
                        <div class="field">
                            <label class="field-label">@LocalizationService.GetString("ClientName")</label>
                            <div class="field-value">@selectedClient.ClientName</div>
                        </div>

                        @if (!string.IsNullOrEmpty(selectedClient.Description))
                        {
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("Description")</label>
                                <div class="field-value">@selectedClient.Description</div>
                            </div>
                        }

                        <div class="field">
                            <label class="field-label">@LocalizationService.GetString("ClientType")</label>
                            <div class="field-value">
                                <span class="client-type-badge @(selectedClient.ClientType == OAuthClientType.Confidential ? "client-type-confidential" : "client-type-public")">
                                    @selectedClient.ClientType.ToString()
                                </span>
                            </div>
                        </div>

                        <div class="field">
                            <label class="field-label">@LocalizationService.GetString("Status")</label>
                            <div class="field-value">
                                <span class="status-badge @(selectedClient.Enabled ? "status-active" : "status-inactive")">
                                    @(selectedClient.Enabled ? LocalizationService.GetString("Enabled") : LocalizationService.GetString("Disabled"))
                                </span>
                            </div>
                        </div>
                    </div>

                    <!-- Credentials -->
                    <div class="detail-section">
                        <h4 class="section-subtitle">@LocalizationService.GetString("Credentials")</h4>
                        
                        <div class="field">
                            <label class="field-label">@LocalizationService.GetString("ClientId")</label>
                            <div class="token-value-container">
                                <input class="token-value-input" readonly value="@selectedClient.ClientId" />
                                <button class="btn btn-outline btn-sm" @onclick="() => CopyToClipboard(selectedClient.ClientId)" title="@LocalizationService.GetString("CopyToClipboard")">
                                    <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                                        <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                                    </svg>
                                </button>
                            </div>
                        </div>

                        @if (selectedClient.ClientType == OAuthClientType.Confidential)
                        {
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("ClientSecret")</label>
                                @if (!string.IsNullOrEmpty(selectedClient.ClientSecret))
                                {
                                    <div class="token-value-container">
                                        <input class="token-value-input" readonly type="@(showClientSecret ? "text" : "password")" value="@selectedClient.ClientSecret" />
                                        <button class="btn btn-outline btn-sm" @onclick="ToggleSecretVisibility" title="@(showClientSecret ? LocalizationService.GetString("HideSecret") : LocalizationService.GetString("ShowSecret"))">
                                            @if (showClientSecret)
                                            {
                                                <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                    <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/>
                                                    <line x1="1" y1="1" x2="23" y2="23"/>
                                                </svg>
                                            }
                                            else
                                            {
                                                <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                                                    <circle cx="12" cy="12" r="3"/>
                                                </svg>
                                            }
                                        </button>
                                        <button class="btn btn-outline btn-sm" @onclick="() => CopyToClipboard(selectedClient.ClientSecret!)" title="@LocalizationService.GetString("CopyToClipboard")">
                                            <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                                            </svg>
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-warning">
                                        <svg class="alert-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
                                            <line x1="12" y1="9" x2="12" y2="13"/>
                                            <line x1="12" y1="17" x2="12.01" y2="17"/>
                                        </svg>
                                        @LocalizationService.GetString("NoClientSecretGenerated")
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>

                <!-- Configuration Details -->
                <div class="detail-section">
                    <h4 class="section-subtitle">@LocalizationService.GetString("Configuration")</h4>
                    
                    <div class="field">
                        <label class="field-label">@LocalizationService.GetString("RedirectURIs")</label>
                        <div class="field-value">
                            @if (selectedClient.RedirectUris.Any())
                            {
                                <div class="uri-list">
                                    @foreach (var uri in selectedClient.RedirectUris)
                                    {
                                        <div class="uri-item">
                                            <code>@uri</code>
                                            <button class="btn btn-outline btn-sm" @onclick="() => CopyToClipboard(uri)" title="@LocalizationService.GetString("CopyToClipboard")">
                                                <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                                                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                                                </svg>
                                            </button>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <span class="text-muted">@LocalizationService.GetString("NoRedirectURIs")</span>
                            }
                        </div>
                    </div>

                    <div class="field">
                        <label class="field-label">@LocalizationService.GetString("AllowedScopes")</label>
                        <div class="field-value">
                            <div class="scope-badges">
                                @foreach (var scope in selectedClient.AllowedScopes)
                                {
                                    <span class="scope-badge">@scope</span><br />
                                }
                            </div>
                        </div>
                    </div>

                    <div class="field">
                        <label class="field-label">@LocalizationService.GetString("AllowedGrantTypes")</label>
                        <div class="field-value">
                            <div class="grant-type-badges">
                                @foreach (var grantType in selectedClient.AllowedGrantTypes)
                                {
                                    <span class="grant-type-badge">@grantType.ToString()</span><br />
                                }
                            </div>
                        </div>
                    </div>

                    <div class="config-grid">
                        <div class="field">
                            <label class="field-label">@LocalizationService.GetString("AccessTokenLifetime")</label>
                            <div class="field-value">@selectedClient.AccessTokenLifetime @LocalizationService.GetString("Seconds")</div>
                        </div>

                        @if (selectedClient.RefreshTokenLifetime.HasValue)
                        {
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("RefreshTokenLifetime")</label>
                                <div class="field-value">@selectedClient.RefreshTokenLifetime.Value @LocalizationService.GetString("Seconds")</div>
                            </div>
                        }

                        <div class="field">
                            <label class="field-label">@LocalizationService.GetString("RequirePKCE")</label>
                            <div class="field-value">
                                <span class="status-badge @(selectedClient.RequirePkce ? "status-active" : "status-inactive")">
                                    @(selectedClient.RequirePkce ? LocalizationService.GetString("Yes") : LocalizationService.GetString("No"))
                                </span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- OAuth Endpoints Information -->
                <div class="oauth-endpoints-info">
                    <h4 class="oauth-endpoints-title">
                        <svg class="section-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.72"/>
                            <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.72-1.72"/>
                        </svg>
                        @LocalizationService.GetString("OAuthEndpoints")
                    </h4>
                    
                    <div class="oauth-endpoint-item">
                        <div class="oauth-endpoint-label">@LocalizationService.GetString("AuthorizationEndpoint"):</div>
                        <div class="oauth-endpoint-url">@(GetBaseUrl())/oauth/authorize</div>
                    </div>
                    
                    <div class="oauth-endpoint-item">
                        <div class="oauth-endpoint-label">@LocalizationService.GetString("TokenEndpoint"):</div>
                        <div class="oauth-endpoint-url">@(GetBaseUrl())/oauth/token</div>
                    </div>
                    
                    <div class="oauth-endpoint-item">
                        <div class="oauth-endpoint-label">@LocalizationService.GetString("UserInfoEndpoint"):</div>
                        <div class="oauth-endpoint-url">@(GetBaseUrl())/oauth/userinfo</div>
                    </div>
                    
                    <div class="oauth-endpoint-item">
                        <div class="oauth-endpoint-label">@LocalizationService.GetString("DiscoveryEndpoint"):</div>
                        <div class="oauth-endpoint-url">@(GetBaseUrl())/oauth/.well-known/oauth-authorization-server</div>
                    </div>
                </div>

                <!-- Metadata -->
                <div class="detail-section">
                    <h4 class="section-subtitle">@LocalizationService.GetString("Metadata")</h4>
                    
                    <div class="metadata-grid">
                        @if (!string.IsNullOrEmpty(selectedClient.CreatedBy))
                        {
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("CreatedBy")</label>
                                <div class="field-value">@selectedClient.CreatedBy</div>
                            </div>
                        }

                        <div class="field">
                            <label class="field-label">@LocalizationService.GetString("Created")</label>
                            <div class="field-value">@selectedClient.CreatedUtc.ToString("G")</div>
                        </div>

                        @if (selectedClient.ModifiedUtc != selectedClient.CreatedUtc)
                        {
                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("LastModified")</label>
                                <div class="field-value">@selectedClient.ModifiedUtc.ToString("G")</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="HideClientDetailsModal">
                    @LocalizationService.GetString("Close")
                </button>
                <button class="btn btn-primary" @onclick="() => ShowEditClientModal(selectedClient)">
                    <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polygon points="14,2 18,6 7,17 3,17 3,13 14,2"/>
                        <line x1="11" y1="5" x2="16" y2="10"/>
                    </svg>
                    @LocalizationService.GetString("Edit")
                </button>
                @if (selectedClient.ClientType == OAuthClientType.Confidential)
                {
                    <button class="btn btn-warning" @onclick="() => ShowRegenerateSecretModal(selectedClient)">
                        <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21 2l-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4"/>
                        </svg>
                        @LocalizationService.GetString("RegenerateSecret")
                    </button>
                }
            </div>
        </div>
    </div>
}

<!-- Edit Client Modal -->
@if (showEditClientModal && selectedClient != null)
{
    <div class="modal-overlay" @onclick="HideEditClientModal">
        <div class="modal-dialog large-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>@LocalizationService.GetString("EditOAuthClient"): @selectedClient.ClientName</h3>
                <button class="modal-close" @onclick="HideEditClientModal">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"/>
                        <line x1="6" y1="6" x2="18" y2="18"/>
                    </svg>
                </button>
            </div>
            <div class="modal-body">
                <form @onsubmit="UpdateClient" @onsubmit:preventDefault="true">
                    <div class="client-details-grid">
                        <!-- Basic Information -->
                        <div class="detail-section">
                            <h4 class="section-subtitle">@LocalizationService.GetString("BasicInformation")</h4>
                            
                            <div class="field">
                                <label class="field-label" for="editClientName">@LocalizationService.GetString("ClientName") *</label>
                                <input id="editClientName" @bind="updateClientRequest.ClientName" class="form-input" type="text" required maxlength="100" />
                            </div>

                            <div class="field">
                                <label class="field-label" for="editClientDescription">@LocalizationService.GetString("Description")</label>
                                <textarea id="editClientDescription" @bind="updateClientRequest.Description" class="form-input" rows="3" maxlength="500"></textarea>
                            </div>

                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("ClientType")</label>
                                <div class="field-value">
                                    <span class="client-type-badge @(selectedClient.ClientType == OAuthClientType.Confidential ? "client-type-confidential" : "client-type-public")">
                                        @selectedClient.ClientType.ToString()
                                    </span>
                                    <small style="color: var(--text-muted); font-size: 0.8rem; margin-left: 0.5rem;">
                                        @LocalizationService.GetString("ClientTypeCannotBeChanged")
                                    </small>
                                </div>
                            </div>
                        </div>

                        <!-- Configuration Details -->
                        <div class="detail-section">
                            <h4 class="section-subtitle">@LocalizationService.GetString("Configuration")</h4>
                            
                            <div class="field">
                                <label class="field-label" for="editRedirectUris">@LocalizationService.GetString("RedirectURIs") *</label>
                                <textarea id="editRedirectUris" @bind="editRedirectUrisText" class="form-input" rows="4" placeholder="https://example.com/callback&#10;https://app.example.com/auth/callback"></textarea>
                                <small style="color: var(--text-muted); font-size: 0.8rem; margin-top: 0.5rem; display: block;">@LocalizationService.GetString("OneURIPerLine")</small>
                            </div>

                            <div class="field">
                                <label class="field-label">@LocalizationService.GetString("AllowedScopes") *</label>
                                <div class="field-value">
                                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 0.75rem; margin-top: 0.5rem; padding: 1rem; background: var(--bg-input); border: 1px solid var(--border-input); border-radius: 8px;">
                                        @foreach (var scope in availableScopes)
                                        {
                                            <label style="display: flex; align-items: center; gap: 0.5rem; font-weight: normal; cursor: pointer;">
                                                <input type="checkbox" 
                                                       checked="@editSelectedScopes.Contains(scope.Name)" 
                                                       @onchange="@((ChangeEventArgs e) => ToggleEditScope(scope.Name, (bool)e.Value!))" 
                                                       style="width: 16px; height: 16px;" />
                                                <span style="font-size: 0.875rem;">@scope.DisplayName</span>
                                            </label>
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="config-grid">
                                <div class="field">
                                    <label class="field-label" for="editAccessTokenLifetime">@LocalizationService.GetString("AccessTokenLifetime") (@LocalizationService.GetString("Seconds"))</label>
                                    <input id="editAccessTokenLifetime" @bind="updateClientRequest.AccessTokenLifetime" class="form-input" type="number" min="300" max="86400" />
                                </div>

                                <div class="field">
                                    <label class="field-label" for="editRefreshTokenLifetime">@LocalizationService.GetString("RefreshTokenLifetimeOptional") (@LocalizationService.GetString("Seconds"))</label>
                                    <input id="editRefreshTokenLifetime" @bind="updateClientRequest.RefreshTokenLifetime" class="form-input" type="number" min="300" max="2592000" />
                                    <small style="color: var(--text-muted); font-size: 0.8rem; margin-top: 0.5rem; display: block;">@LocalizationService.GetString("LeaveEmptyForNoRefreshTokens")</small>
                                </div>

                                <div class="field">
                                    <label class="field-label">@LocalizationService.GetString("RequirePKCE")</label>
                                    <div class="field-value">
                                        <label style="display: flex; align-items: center; gap: 0.5rem; font-weight: normal; cursor: pointer; padding: 0.75rem; background: var(--bg-input); border: 1px solid var(--border-input); border-radius: 8px;">
                                            <input type="checkbox" @bind="updateClientRequest.RequirePkce" style="width: 16px; height: 16px;" />
                                            <span style="font-size: 0.875rem; color: var(--text-primary);">@LocalizationService.GetString("RequirePKCE")</span>
                                        </label>
                                    </div>
                                </div>

                                <div class="field">
                                    <label class="field-label">@LocalizationService.GetString("Enabled")</label>
                                    <div class="field-value">
                                        <label style="display: flex; align-items: center; gap: 0.5rem; font-weight: normal; cursor: pointer; padding: 0.75rem; background: var(--bg-input); border: 1px solid var(--border-input); border-radius: 8px;">
                                            <input type="checkbox" @bind="updateClientRequest.Enabled" style="width: 16px; height: 16px;" />
                                            <span style="font-size: 0.875rem; color: var(--text-primary);">@LocalizationService.GetString("Enabled")</span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn btn-outline" @onclick="HideEditClientModal">
                            @LocalizationService.GetString("Cancel")
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isUpdatingClient">
                            @if (isUpdatingClient)
                            {
                                <div class="loading-spinner"></div>
                                @LocalizationService.GetString("UpdatingClient")
                            }
                            else
                            {
                                @LocalizationService.GetString("UpdateClient")
                            }
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

<!-- Regenerate Secret Modal -->
@if (showRegenerateSecretModal && clientForSecretRegeneration != null)
{
    <div class="modal-overlay" @onclick="HideRegenerateSecretModal">
        <div class="modal-dialog" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>@LocalizationService.GetString("NewSecretGenerated")</h3>
                <button class="modal-close" @onclick="HideRegenerateSecretModal">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"/>
                        <line x1="6" y1="6" x2="18" y2="18"/>
                    </svg>
                </button>
            </div>
            <div class="modal-body">
                @if (isRegeneratingSecret)
                {
                    <div class="loading-state">
                        <div class="loading-spinner"></div>
                        <p>@LocalizationService.GetString("RegeneratingSecret")</p>
                    </div>
                }
                else if (!string.IsNullOrEmpty(newGeneratedSecret))
                {
                    <div class="alert alert-warning">
                        <svg class="alert-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
                        </svg>
                        @LocalizationService.GetString("NewSecretWarning")
                    </div>

                    <div class="input-group">
                        <label class="field-label">@LocalizationService.GetString("ClientSecret")</label>
                        <div class="token-value-container">
                            <input class="token-value-input" readonly type="@(showNewSecret ? "text" : "password")" value="@newGeneratedSecret" />
                            <button class="btn btn-outline btn-sm" @onclick="ToggleNewSecretVisibility" title="@(showNewSecret ? LocalizationService.GetString("HideSecret") : LocalizationService.GetString("ShowSecret"))">
                                @if (showNewSecret)
                                {
                                    <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/>
                                    </svg>
                                }
                                else
                                {
                                    <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                                        <circle cx="12" cy="12" r="3"/>
                                    </svg>
                                }
                            </button>
                            <button class="btn btn-outline btn-sm" @onclick="CopyNewSecretToClipboard" title="@LocalizationService.GetString("CopyToClipboard")">
                                <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                }
            </div>
            
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="HideRegenerateSecretModal">
                    @LocalizationService.GetString("Close")
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public User? CurrentUser { get; set; }

    private List<OAuthClient> oauthClients = new();
    private List<OAuthScope> availableScopes = new();

    // Create client modal
    private bool showCreateClientModal = false;
    private bool isCreatingClient = false;
    private CreateOAuthClientRequest newClientRequest = new();
    private string redirectUrisText = "";
    private HashSet<string> selectedScopes = new();

    // Edit client modal
    private bool showEditClientModal = false;
    private bool isUpdatingClient = false;
    private UpdateOAuthClientRequest updateClientRequest = new();
    private string editRedirectUrisText = "";
    private HashSet<string> editSelectedScopes = new();

    // Regenerate secret modal
    private bool showRegenerateSecretModal = false;
    private bool isRegeneratingSecret = false;
    private OAuthClient? clientForSecretRegeneration = null;
    private string? newGeneratedSecret = null;
    private bool showNewSecret = false;

    // Client details modal
    private bool showClientDetailsModal = false;
    private OAuthClient? selectedClient = null;
    private bool showClientSecret = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        availableScopes = OAuthClientService.GetAvailableScopes();
    }

    protected override async Task LoadDataAsync()
    {
        try
        {
            oauthClients = await OAuthClientService.GetAllClientsAsync();
            Logger.Log("OAuthClientManagementTab", $"Loaded {oauthClients.Count} OAuth clients");
        }
        catch (Exception ex)
        {
            Logger.LogError("OAuthClientManagementTab", $"Error loading OAuth clients: {ex.Message}", ex);
            await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                LocalizationService.GetString("ErrorLoadingOAuthClients"));
        }
    }

    private void ShowCreateClientModal()
    {
        newClientRequest = new CreateOAuthClientRequest();
        redirectUrisText = "";
        selectedScopes.Clear();
        selectedScopes.Add("openid"); // Default scope
        showCreateClientModal = true;
    }

    private void HideCreateClientModal()
    {
        showCreateClientModal = false;
    }

    private void ShowEditClientModal(OAuthClient client)
    {
        updateClientRequest = new UpdateOAuthClientRequest
        {
            ClientId = client.ClientId,
            ClientName = client.ClientName,
            Description = client.Description,
            RedirectUris = new List<string>(client.RedirectUris),
            AllowedScopes = new List<string>(client.AllowedScopes),
            AccessTokenLifetime = client.AccessTokenLifetime,
            RefreshTokenLifetime = client.RefreshTokenLifetime,
            RequirePkce = client.RequirePkce,
            AllowPlainTextPkce = client.AllowPlainTextPkce,
            LogoUri = client.LogoUri,
            ClientUri = client.ClientUri,
            TosUri = client.TosUri,
            PolicyUri = client.PolicyUri,
            Enabled = client.Enabled
        };

        editRedirectUrisText = string.Join("\n", client.RedirectUris);
        editSelectedScopes = new HashSet<string>(client.AllowedScopes);
        
        selectedClient = client;
        showEditClientModal = true;
        
        // Hide details modal if open
        showClientDetailsModal = false;
    }

    private void HideEditClientModal()
    {
        showEditClientModal = false;
        selectedClient = null;
    }

    private async Task UpdateClient()
    {
        try
        {
            isUpdatingClient = true;

            // Validate redirect URIs
            var uris = editRedirectUrisText
                .Split('\n', StringSplitOptions.RemoveEmptyEntries)
                .Select(uri => uri.Trim())
                .Where(uri => !string.IsNullOrEmpty(uri))
                .ToList();

            if (!uris.Any())
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                    LocalizationService.GetString("RedirectURIsRequired"));
                return;
            }

            // Parse redirect URIs
            updateClientRequest.RedirectUris = uris;

            // Set selected scopes
            updateClientRequest.AllowedScopes = editSelectedScopes.ToList();

            if (!updateClientRequest.AllowedScopes.Any())
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                    LocalizationService.GetString("ScopesRequired"));
                return;
            }

            var success = await OAuthClientService.UpdateClientAsync(updateClientRequest, CurrentUser?.UserName ?? "admin");
            
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.success", 
                    LocalizationService.GetString("OAuthClientUpdatedSuccessfully"));
                
                showEditClientModal = false;
                await LoadDataAsync();
                await OnDataChanged.InvokeAsync();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                    LocalizationService.GetString("ErrorUpdatingOAuthClientDetails"));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("OAuthClientManagementTab", $"Error updating OAuth client: {ex.Message}", ex);
            await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                LocalizationService.GetString("ErrorUpdatingOAuthClientDetails"));
        }
        finally
        {
            isUpdatingClient = false;
        }
    }

    private async Task ShowRegenerateSecretModal(OAuthClient client)
    {
        clientForSecretRegeneration = client;
        newGeneratedSecret = null;
        showNewSecret = false;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            LocalizationService.GetString("ConfirmRegenerateSecret"));
            
        if (confirmed)
        {
            await RegenerateClientSecret();
        }
    }

    private async Task RegenerateClientSecret()
    {
        if (clientForSecretRegeneration == null) return;

        try
        {
            isRegeneratingSecret = true;
            showRegenerateSecretModal = true;

            newGeneratedSecret = await OAuthClientService.RegenerateClientSecretAsync(clientForSecretRegeneration.ClientId);
            
            await JSRuntime.InvokeVoidAsync("toastHelper.success", 
                LocalizationService.GetString("ClientSecretRegeneratedSuccessfully"));
            
            await LoadDataAsync();
            await OnDataChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError("OAuthClientManagementTab", $"Error regenerating client secret: {ex.Message}", ex);
            await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                LocalizationService.GetString("ErrorRegeneratingSecret"));
            showRegenerateSecretModal = false;
        }
        finally
        {
            isRegeneratingSecret = false;
        }
    }

    private void HideRegenerateSecretModal()
    {
        showRegenerateSecretModal = false;
        clientForSecretRegeneration = null;
        newGeneratedSecret = null;
        showNewSecret = false;
    }

    private void ToggleNewSecretVisibility()
    {
        showNewSecret = !showNewSecret;
    }

    private async Task CopyNewSecretToClipboard()
    {
        if (!string.IsNullOrEmpty(newGeneratedSecret))
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", newGeneratedSecret);
                await JSRuntime.InvokeVoidAsync("toastHelper.success", 
                    LocalizationService.GetString("ClientSecretCopiedToClipboard"));
            }
            catch
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                    LocalizationService.GetString("FailedToCopyToClipboard"));
            }
        }
    }

    private void ToggleScope(string scopeName, bool isSelected)
    {
        if (isSelected)
        {
            selectedScopes.Add(scopeName);
        }
        else
        {
            selectedScopes.Remove(scopeName);
        }
    }

    private void ToggleEditScope(string scopeName, bool isSelected)
    {
        if (isSelected)
        {
            editSelectedScopes.Add(scopeName);
        }
        else
        {
            editSelectedScopes.Remove(scopeName);
        }
    }

    private async Task CreateClient()
    {
        try
        {
            isCreatingClient = true;

            // Validate redirect URIs
            var uris = redirectUrisText
                .Split('\n', StringSplitOptions.RemoveEmptyEntries)
                .Select(uri => uri.Trim())
                .Where(uri => !string.IsNullOrEmpty(uri))
                .ToList();

            if (!uris.Any())
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                    LocalizationService.GetString("RedirectURIsRequired"));
                return;
            }

            // Parse redirect URIs
            newClientRequest.RedirectUris = uris;

            // Set selected scopes
            newClientRequest.AllowedScopes = selectedScopes.ToList();

            if (!newClientRequest.AllowedScopes.Any())
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                    LocalizationService.GetString("ScopesRequired"));
                return;
            }

            // Set grant types
            newClientRequest.AllowedGrantTypes = new List<OAuthGrantType> 
            { 
                OAuthGrantType.AuthorizationCode,
                OAuthGrantType.RefreshToken
            };

            var createdClient = await OAuthClientService.CreateClientAsync(newClientRequest, CurrentUser?.UserName ?? "admin");
            
            // Show success message with client credentials
            if (createdClient.ClientType == OAuthClientType.Confidential && !string.IsNullOrEmpty(createdClient.ClientSecret))
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.success", 
                    $"{LocalizationService.GetString("OAuthClientCreatedSuccessfully")}\n" +
                    $"Client ID: {createdClient.ClientId}\n" +
                    $"Client Secret: {createdClient.ClientSecret}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.success", 
                    $"{LocalizationService.GetString("OAuthClientCreatedSuccessfully")}\n" +
                    $"Client ID: {createdClient.ClientId}");
            }

            showCreateClientModal = false;
            await LoadDataAsync();
            await OnDataChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError("OAuthClientManagementTab", $"Error creating OAuth client: {ex.Message}", ex);
            await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                LocalizationService.GetString("ErrorCreatingOAuthClient"));
        }
        finally
        {
            isCreatingClient = false;
        }
    }

    private void ShowClientDetails(OAuthClient client)
    {
        selectedClient = client;
        showClientDetailsModal = true;
    }

    private void HideClientDetailsModal()
    {
        showClientDetailsModal = false;
        selectedClient = null;
        showClientSecret = false;
    }

    private void ToggleSecretVisibility()
    {
        showClientSecret = !showClientSecret;
    }

    private async Task ToggleClientEnabled(OAuthClient client)
    {
        try
        {
            client.Enabled = !client.Enabled;
            await OAuthClientService.UpdateClientAsync(client);
            
            var message = client.Enabled 
                ? LocalizationService.GetString("OAuthClientEnabled")
                : LocalizationService.GetString("OAuthClientDisabled");
                
            await JSRuntime.InvokeVoidAsync("toastHelper.success", message);
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError("OAuthClientManagementTab", $"Error toggling client enabled status: {ex.Message}", ex);
            await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                LocalizationService.GetString("ErrorUpdatingOAuthClient"));
        }
    }

    private async Task ShowDeleteClientModal(OAuthClient client)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"{LocalizationService.GetString("ConfirmDeleteOAuthClient")} '{client.ClientName}'?");
            
        if (confirmed)
        {
            await DeleteClient(client);
        }
    }

    private async Task DeleteClient(OAuthClient client)
    {
        try
        {
            await OAuthClientService.DeleteClientAsync(client.ClientId);
            await JSRuntime.InvokeVoidAsync("toastHelper.success", 
                LocalizationService.GetString("OAuthClientDeletedSuccessfully"));
            await LoadDataAsync();
            await OnDataChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError("OAuthClientManagementTab", $"Error deleting OAuth client: {ex.Message}", ex);
            await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                LocalizationService.GetString("ErrorDeletingOAuthClient"));
        }
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
            await JSRuntime.InvokeVoidAsync("toastHelper.success", 
                LocalizationService.GetString("CopiedToClipboard"));
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                LocalizationService.GetString("FailedToCopyToClipboard"));
        }
    }

    private string GetBaseUrl()
    {
        var uri = new Uri(Navigation.Uri);
        return $"{uri.Scheme}://{uri.Host}{(uri.Port != 80 && uri.Port != 443 ? $":{uri.Port}" : "")}";
    }
}