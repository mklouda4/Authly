@inherits BaseAdminTab
@inject ISecurityService SecurityService
@inject IApplicationLogger Logger
@inject IJSRuntime JSRuntime

<div class="admin-section">
    <!-- Manual IP Blocking Section -->
    <div class="manual-ip-form" style="margin-bottom: 2rem;">
        <div class="form-group">
            <label for="ipAddressInput" class="form-label">@LocalizationService.GetString("IPAddress")</label>
            <div class="input-group">
                <input type="text"
                       id="ipAddressInput"
                       class="form-input @(string.IsNullOrEmpty(validationError) ? "" : "error")"
                       @bind="newIpAddress"
                       @onkeypress="HandleKeyPress"
                       placeholder="@LocalizationService.GetString("IPAddressPlaceholder")"
                       disabled="@(IsLoading || isLocalLoading || isProcessingManualBan)" />
                <button class="btn btn-admin-action btn-danger"
                        @onclick="BanNewIpAddress"
                        disabled="@(IsLoading || isLocalLoading || isProcessingManualBan || string.IsNullOrWhiteSpace(newIpAddress))"
                        title="@LocalizationService.GetString("BlockIP")">
                    @if (isProcessingManualBan)
                    {
                        <div class="btn-spinner"></div>
                    }
                    else
                    {
                        <svg class="btn-icon-xs" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10" />
                            <line x1="4.93" y1="4.93" x2="19.07" y2="19.07" />
                        </svg>
                    }
                    @LocalizationService.GetString("BlockIP")
                </button>
            </div>
            @if (!string.IsNullOrEmpty(validationError))
            {
                <div class="validation-error">@validationError</div>
            }
        </div>
    </div>

    <!-- Existing Banned IPs Section -->
    <h2 class="section-title">@LocalizationService.GetString("BannedIPs")</h2>
    
    @if (isLocalLoading)
    {
        <div class="loading-state">
            <div class="loading-spinner"></div>
            <p>@LocalizationService.GetString("Loading")</p>
        </div>
    }
    else if (IpBans.Any())
    {
        <div class="admin-table">
            <table class="data-table">
                <thead>
                    <tr>
                        <th>@LocalizationService.GetString("IPAddress")</th>
                        <th>@LocalizationService.GetString("FailedAttempts")</th>
                        <th>@LocalizationService.GetString("FirstAttempt")</th>
                        <th>@LocalizationService.GetString("LastAttempt")</th>
                        <th>@LocalizationService.GetString("Status")</th>
                        <th>@LocalizationService.GetString("BanExpires")</th>
                        <th>@LocalizationService.GetString("Actions")</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ipBan in IpBans)
                    {
                        <tr class="@(ipBan.IsCurrentlyBanned ? "banned-row" : "")">
                            <td class="ip-cell" data-label="@LocalizationService.GetString("IPAddress")">@ipBan.IpAddress</td>
                            <td data-label="@LocalizationService.GetString("FailedAttempts")">@ipBan.FailedAttempts</td>
                            <td data-label="@LocalizationService.GetString("FirstAttempt")">@FormatDateTime(ipBan.FirstAttemptUtc)</td>
                            <td data-label="@LocalizationService.GetString("LastAttempt")">@FormatDateTime(ipBan.LastAttemptUtc)</td>
                            <td data-label="@LocalizationService.GetString("Status")">
                                @if (ipBan.IsCurrentlyBanned)
                                {
                                    <span class="status-badge banned">@LocalizationService.GetString("Banned")</span>
                                }
                                else
                                {
                                    <span class="status-badge not-banned">@LocalizationService.GetString("NotBanned")</span>
                                }
                            </td>
                            <td data-label="@LocalizationService.GetString("BanExpires")">
                                @if (ipBan.BanEndUtc.HasValue)
                                {
                                    @FormatDateTime(ipBan.BanEndUtc.Value)
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td data-label="@LocalizationService.GetString("Note")">@ipBan.Note</td>
                            <td data-label="@LocalizationService.GetString("Actions")">
                                <div class="action-buttons">
                                    @if (ipBan.IsCurrentlyBanned)
                                    {
                                        <button class="btn btn-admin-action btn-success" @onclick="() => UnbanIp(ipBan.IpAddress)" disabled="@(IsLoading || isLocalLoading)" title="@LocalizationService.GetString("Unban")">
                                            <svg class="btn-icon-xs" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                <path d="M9 12l2 2 4-4"/>
                                                <circle cx="12" cy="12" r="10"/>
                                            </svg>
                                            @LocalizationService.GetString("Unban")
                                        </button>
                                    }
                                    else if (ipBan.FailedAttempts > 0)
                                    {
                                        <button class="btn btn-admin-action btn-outline" @onclick="() => UnbanIp(ipBan.IpAddress)" disabled="@(IsLoading || isLocalLoading)" title="@LocalizationService.GetString("Reset")">
                                            <svg class="btn-icon-xs" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                <path d="M1 4h22m-2 13v2a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-2"/>
                                                <path d="M7 8v8"/>
                                                <path d="M17 8v8"/>
                                            </svg>
                                            @LocalizationService.GetString("Reset")
                                        </button>
                                        
                                        <button class="btn btn-admin-action btn-danger" @onclick="() => BanIpPermanently(ipBan.IpAddress)" disabled="@(IsLoading || isLocalLoading)" title="@LocalizationService.GetString("BanPermanently")">
                                            <svg class="btn-icon-xs" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                <circle cx="12" cy="12" r="10"/>
                                                <line x1="4.93" y1="4.93" x2="19.07" y2="19.07"/>
                                            </svg>
                                            @LocalizationService.GetString("Ban")
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-admin-action btn-danger" @onclick="() => BanIpPermanently(ipBan.IpAddress)" disabled="@(IsLoading || isLocalLoading)" title="@LocalizationService.GetString("BanPermanently")">
                                            <svg class="btn-icon-xs" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                <circle cx="12" cy="12" r="10"/>
                                                <line x1="4.93" y1="4.93" x2="19.07" y2="19.07"/>
                                            </svg>
                                            @LocalizationService.GetString("Ban")
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (hasLoadedData)
    {
        <div class="empty-state">
            <p>@LocalizationService.GetString("NoIPBansFound")</p>
        </div>
    }
</div>

@code {
    private List<IpLoginAttempt> IpBans { get; set; } = new();
    private string newIpAddress = "";
    private string validationError = "";
    private bool isProcessingManualBan = false;

    protected override async Task LoadDataAsync()
    {
        try
        {
            Logger.Log("IpManagementTab", "Loading IP bans data");
            IpBans = SecurityService.GetAllIpBans();
            Logger.Log("IpManagementTab", $"Loaded {IpBans.Count} IP bans");
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            Logger.LogError("IpManagementTab", "Error loading IP bans", ex);
            await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                LocalizationService.GetString("UnexpectedError"));
        }
    }

    private async Task UnbanIp(string ipAddress)
    {
        try
        {
            var success = SecurityService.UnbanIpAddress(ipAddress, "Manual");

            if (success)
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.success", 
                    LocalizationService.GetString("IPUnbannedSuccessfully"));
                await RefreshData();
                await OnDataChanged.InvokeAsync();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                    LocalizationService.GetString("FailedToUnbanIP"));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("IpManagementTab", $"Error unbanning IP {ipAddress}", ex);
            await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                LocalizationService.GetString("FailedToUnbanIP"));
        }
    }

    private async Task BanIpPermanently(string ipAddress)
    {
        try
        {
            var success = SecurityService.ManualBanIpAddress(ipAddress);

            if (success)
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.success", 
                    LocalizationService.GetString("IPBannedSuccessfully"));
                await RefreshData();
                await OnDataChanged.InvokeAsync();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                    LocalizationService.GetString("FailedToBanIP"));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("IpManagementTab", $"Error banning IP {ipAddress}", ex);
            await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                LocalizationService.GetString("FailedToBanIP"));
        }
    }

    private async Task BanNewIpAddress()
    {
        if (string.IsNullOrWhiteSpace(newIpAddress))
        {
            validationError = LocalizationService.GetString("IPAddressRequired");
            return;
        }

        if (!IsValidIpAddress(newIpAddress.Trim()))
        {
            validationError = LocalizationService.GetString("InvalidIPAddress");
            return;
        }

        validationError = "";
        isProcessingManualBan = true;
        StateHasChanged();

        try
        {
            var ipToBlock = newIpAddress.Trim();
            Logger.Log("IpManagementTab", $"Attempting to manually ban IP: {ipToBlock}");

            var success = SecurityService.ManualBanIpAddress(ipToBlock);

            if (success)
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.success", 
                    LocalizationService.GetString("IPBannedSuccessfully"));

                // Clear the input field
                newIpAddress = "";

                // Refresh the data to show the newly banned IP
                await RefreshData();
                await OnDataChanged.InvokeAsync();

                Logger.Log("IpManagementTab", $"Successfully banned IP: {ipToBlock}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                    LocalizationService.GetString("FailedToBanIP"));
                Logger.LogWarning("IpManagementTab", $"Failed to ban IP: {ipToBlock}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("IpManagementTab", $"Error manually banning IP {newIpAddress}", ex);
            await JSRuntime.InvokeVoidAsync("toastHelper.error", 
                LocalizationService.GetString("FailedToBanIP"));
        }
        finally
        {
            isProcessingManualBan = false;
            StateHasChanged();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newIpAddress))
        {
            await BanNewIpAddress();
        }
    }

    private bool IsValidIpAddress(string ipAddress)
        => System.Net.IPAddress.TryParse(ipAddress, out _);
}