// <auto-generated />
using System;
using Authly.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Authly.Migrations
{
    [DbContext(typeof(AuthlyDbContext))]
    partial class AuthlyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Authly.Models.ActiveSessionMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.ToTable("ActiveSessionMetrics");
                });

            modelBuilder.Entity("Authly.Models.IpLoginAttempt", b =>
                {
                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BanEndUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FirstAttemptUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastAttemptUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("IpAddress");

                    b.ToTable("IpLoginAttempts");
                });

            modelBuilder.Entity("Authly.Models.LoginAttemptMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<double?>("ResponseTimeMs")
                        .HasColumnType("REAL");

                    b.Property<bool>("Success")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IpAddress");

                    b.HasIndex("Success");

                    b.HasIndex("Username");

                    b.ToTable("LoginAttemptMetrics");
                });

            modelBuilder.Entity("Authly.Models.OAuthAccessToken", b =>
                {
                    b.Property<string>("TokenId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TokenId");

                    b.HasIndex("AccessToken")
                        .IsUnique();

                    b.HasIndex("ExpiresUtc");

                    b.HasIndex("ClientId", "UserId");

                    b.ToTable("OAuthAccessTokens");
                });

            modelBuilder.Entity("Authly.Models.OAuthAuthorizationCode", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeChallenge")
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeChallengeMethod")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nonce")
                        .HasColumnType("TEXT");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.HasIndex("ExpiresUtc");

                    b.HasIndex("ClientId", "UserId");

                    b.ToTable("OAuthAuthorizationCodes");
                });

            modelBuilder.Entity("Authly.Models.OAuthClient", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AllowedGrantTypes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedScopes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientUri")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogoUri")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyUri")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RedirectUris")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RefreshTokenLifetime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TosUri")
                        .HasColumnType("TEXT");

                    b.HasKey("ClientId");

                    b.ToTable("OAuthClients");
                });

            modelBuilder.Entity("Authly.Models.OAuthRefreshToken", b =>
                {
                    b.Property<string>("TokenId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessTokenId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TokenId");

                    b.HasIndex("AccessTokenId");

                    b.HasIndex("ExpiresUtc");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.HasIndex("ClientId", "UserId");

                    b.ToTable("OAuthRefreshTokens");
                });

            modelBuilder.Entity("Authly.Models.PerformanceMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Endpoint")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long?>("RequestSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ResponseSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ResponseTimeMs")
                        .HasColumnType("REAL");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Success")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("OperationType");

                    b.HasIndex("ResponseTimeMs");

                    b.HasIndex("Success");

                    b.HasIndex("UserId");

                    b.ToTable("PerformanceMetrics");
                });

            modelBuilder.Entity("Authly.Models.ResourceUsageMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActiveDbConnections")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveThreads")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CpuUsagePercent")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("MemoryUsageMB")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalMemoryMB")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.ToTable("ResourceUsageMetrics");
                });

            modelBuilder.Entity("Authly.Models.SecurityEventMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<int>("Severity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EventType");

                    b.HasIndex("IpAddress");

                    b.HasIndex("Severity");

                    b.HasIndex("Username");

                    b.ToTable("SecurityEventMetrics");
                });

            modelBuilder.Entity("Authly.Models.Token", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedFromIp")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedFromUserAgent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Scopes")
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TokenValue")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Authly.Models.UptimeMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double?>("HealthCheckResponseTimeMs")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsAvailable");

                    b.ToTable("UptimeMetrics");
                });
#pragma warning restore 612, 618
        }
    }
}
